{"version":3,"sources":["views/apps/user/list/Sidebar.js","views/apps/user/list/Table.js","views/apps/user/list/index.js","@core/components/sidebar/index.js","views/apps/user/store/action/index.js"],"names":["newItem","open","toggleSidebar","useState","projectLogo","setprojectLogo","blockchainLogo","setblockchainLogo","siteImg","setSiteImg","size","headerClassName","contentClassName","onSubmit","event","errors","length","preventDefault","Label","for","FormGroup","id","src","Button","Ripple","tag","className","color","name","accept","hidden","onChange","e","URL","createObjectURL","target","files","projectLogoSelect","type","required","blockchainLogoSelect","placeholder","value","Input","rows","siteImgSelect","outline","onClick","UsersList","dispatch","useDispatch","useSelector","state","users","allData","setAllData","searchTerm","currentPage","setCurrentPage","rowsPerPage","sidebarOpen","setSidebarOpen","label","currentRole","currentPlan","number","currentStatus","onSave","val","a","Axios","post","status","data","result","alert","statusObj","columns","minWidth","selector","sortable","cell","row","href","address","projectName","tokenName","amount","tokenPrice","tokenAmount","Badge","pill","style","marginTop","width","index","findIndex","_id","console","log","onChangeStatus","background","useEffect","get","userData","getAllData","getData","page","perPage","role","q","Card","noHeader","pagination","subHeader","responsive","paginationServer","sortIcon","paginationComponent","count","Number","toFixed","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","Sidebar","Table","props","bodyClassName","wrapperClassName","title","children","closeBtn","rest","renderCloseBtn","isOpen","toggle","classnames","modalClassName","undefined","String","close","axios","then","response","params","totalPages","total","getUser","selectedUser","user","catch","err"],"mappings":"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","file":"static/js/108.3c78bbed.chunk.js","sourcesContent":["// ** Custom Components\nimport Sidebar from '@components/sidebar'\n\n// ** Third Party Components\nimport { Lock, Edit, Trash2 } from 'react-feather'\nimport { Button, FormGroup, Label, Input } from 'reactstrap'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\nimport { useState } from 'react'\nimport \"../../../../assets/scss/views/lanuchpad/lanuchpad.scss\"\n\nconst newItem = ({ open, toggleSidebar }) => {\n  // ** Function to handle form submit\n  const onSubmit = (event, errors) => {\n    if (!errors.length) {\n      toggleSidebar()\n    }\n    event.preventDefault()\n  }\n  const [projectLogo, setprojectLogo] = useState('')\n  const [blockchainLogo, setblockchainLogo] = useState('')\n  const [siteImg, setSiteImg] = useState('')\n  const projectLogoSelect = (e) => {\n    setprojectLogo(URL.createObjectURL(e.target.files[0]))\n  }\n  const blockchainLogoSelect = (e) => {\n    setblockchainLogo(URL.createObjectURL(e.target.files[0]))\n  }\n  const siteImgSelect = (e) => {\n    setSiteImg(URL.createObjectURL(e.target.files[0]))\n  }\n\n  return (\n    <Sidebar\n      size='lg'\n      open={open}\n      headerClassName='mb-1'\n      contentClassName='pt-0'\n      toggleSidebar={toggleSidebar}\n    >\n      <AvForm onSubmit={onSubmit}>\n        <Label for='project-logo'>Project Logo</Label>\n        <FormGroup>\n          <img id=\"projectImg\" src={projectLogo}></img>\n\n          <Button.Ripple id='change-img' tag={Label} className='mr-75 mb-0' color='primary'>\n            <span className='d-none d-sm-block'>Change</span>\n            <span className='d-block d-sm-none'>Change\n            </span>\n            <AvInput name='project-logo' accept='image/*' hidden id='project-logo' onChange={(e) => projectLogoSelect(e)} type=\"file\" required />\n          </Button.Ripple>\n        </FormGroup>\n        <Label for='project-logo'>Blockchain Logo</Label>\n        <FormGroup>\n          <img id=\"blockchainImg\" src={blockchainLogo}></img>\n          <Button.Ripple id='change-img' tag={Label} className='mr-75 mb-0' color='primary'>\n            <span className='d-none d-sm-block'>Change</span>\n            <span className='d-block d-sm-none'>\n              Change\n            </span>\n            <AvInput name='project-logo' accept='image/*' hidden id='project-logo' onChange={(e) => blockchainLogoSelect(e)} type=\"file\" required />\n          </Button.Ripple>\n        </FormGroup>\n\n        <FormGroup>\n          <Label for='project-name'>Project Name</Label>\n          <AvInput name='project-name' id='project-name' placeholder='Staking' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='token-name'>Token Name</Label>\n          <AvInput name='token-name' id='token-name' placeholder='Solview' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='website'>Website</Label>\n          <AvInput name='website' id='website' placeholder='solview.app' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='twitter'>Twitter</Label>\n          <AvInput name='twitter' id='twitter' placeholder='twitter.com' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='discord'>Discord</Label>\n          <AvInput name='discord' id='discord' placeholder='(397) 294-5153' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='medium'>Medium</Label>\n          <AvInput name='medium' id='medium' placeholder='(397) 294-5153' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='telegram'>Telegram</Label>\n          <AvInput name='telegram' id='telegram' placeholder='(397) 294-5153' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='status'>Status</Label>\n          <AvInput type='select' id='status' name='status' required>\n            <option value='live'>Live</option>\n            <option value='upcoming'>Upcoming</option>\n            <option value='ended'>Ended</option>\n          </AvInput>\n        </FormGroup>\n        <Label>Detail</Label>\n        <Input type='textarea' name='text' id='exampleText' rows='3' placeholder='Textarea' />\n        <Label for='project-logo'>Detail Image</Label>\n        <FormGroup>\n          <img id=\"detailImg\" src={siteImg}></img>\n          <Button.Ripple id='change-img' tag={Label} className='mr-75 mb-0' color='primary'>\n            <span className='d-none d-sm-block'>Change</span>\n            <span className='d-block d-sm-none'>Change\n            </span>\n            <AvInput name='project-logo' accept='image/*' hidden id='project-logo' onChange={(e) => siteImgSelect(e)} type=\"file\" required />\n          </Button.Ripple>\n        </FormGroup>\n        <Button type='submit' className='mr-1' color='primary'>\n          Save\n        </Button>\n        <Button type='reset' color='secondary' outline onClick={toggleSidebar}>\n          Cancel\n        </Button>\n      </AvForm>\n    </Sidebar>\n  )\n}\n\nexport default newItem\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Invoice List Sidebar\nimport Sidebar from './Sidebar'\n\n// ** Columns\n// import { columns } from './columns'\n\n// ** Store & Actions\nimport { getAllData, getData } from '../store/action'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport { selectThemeColors } from '@utils'\nimport { Card, Badge, CardHeader, FormGroup, CardTitle, CardBody, Input, Row, Col, Label, CustomInput, Button } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport Axios from 'axios'\n\n// ** Table Header\nconst CustomHeader = ({ toggleSidebar, handlePerPage, rowsPerPage, handleFilter, searchTerm }) => {\n  return (\n    <div className='invoice-list-table-header w-100 mr-1 ml-50 mt-2 mb-75'>\n      <Row>\n        <Col xl='6' className='d-flex align-items-center p-0'>\n          <div className='d-flex align-items-center w-100'>\n            <Label for='rows-per-page'>Show</Label>\n            <CustomInput\n              className='form-control mx-50'\n              type='select'\n              id='rows-per-page'\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{\n                width: '5rem',\n                padding: '0 0.8rem',\n                backgroundPosition: 'calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0'\n              }}\n            >\n              <option value='10'>10</option>\n              <option value='25'>25</option>\n              <option value='50'>50</option>\n            </CustomInput>\n            <Label for='rows-per-page'>Entries</Label>\n          </div>\n        </Col>\n        <Col\n          xl='6'\n          className='d-flex align-items-sm-center justify-content-lg-end justify-content-start flex-lg-nowrap flex-wrap flex-sm-row flex-column pr-lg-1 p-0 mt-lg-0 mt-1'\n        >\n          <div className='d-flex align-items-center mb-sm-0 mb-1 mr-1'>\n            <Label className='mb-0' for='search-invoice'>\n              Search:\n            </Label>\n            <Input\n              id='search-invoice'\n              className='ml-50 w-100'\n              type='text'\n              value={searchTerm}\n              onChange={e => handleFilter(e.target.value)}\n            />\n          </div>\n\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst UsersList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.users)\n  const [allData, setAllData] = useState([])\n  // ** States\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [currentRole, setCurrentRole] = useState({ value: '', label: 'Select Role' })\n  const [currentPlan, setCurrentPlan] = useState({ value: '', label: 'Select Plan' })\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\n  const onChangeStatus = (val, id) => {\n    const index = allData.findIndex(e => e._id === id)\n    console.log(index, \"index\")\n    const changeData = allData[index]\n    changeData.status = val\n\n    setAllData([...allData])\n  }\n  const onSave = async (id, val) => {\n    const url = 'https://admin.solview.app/ido/update'\n    const result = await Axios.post(url, { id, status: val })\n    if (result.data.result === 'success') {\n      alert(\"success!\")\n    }\n  }\n  const statusObj = {\n    pending: 'light-warning',\n    active: 'light-success',\n    inactive: 'light-secondary'\n  }\n  const columns = [\n    {\n      name: 'address',\n      minWidth: '300px',\n      selector: 'address',\n      sortable: true,\n      cell: row => (\n        <a href={`https://solscan.io/account/${row.address}`} target='_blank'>{row.address}</a>\n      )\n    },\n    {\n      name: 'ProjectName',\n      minWidth: '150px',\n      selector: 'projectName',\n      sortable: true,\n      cell: row => row.projectName\n    },\n    {\n      name: 'TokenName',\n      minWidth: '150px',\n      selector: 'tokenName',\n      sortable: true,\n      cell: row => row.tokenName\n    },\n    {\n      name: 'sent amount(usdc)',\n      minWidth: '150px',\n      selector: 'amount',\n      sortable: true,\n      cell: row => row.amount\n    },\n    {\n      name: 'tokenPrice',\n      minWidth: '172px',\n      selector: 'tokenPrice',\n      sortable: true,\n      cell: row => row.tokenPrice\n    },\n    {\n      name: 'sending token amount',\n      minWidth: '138px',\n      selector: 'tokenAmount',\n      sortable: true,\n      cell: row => row.tokenAmount\n    },\n    {\n      name: 'Status',\n      minWidth: '138px',\n      selector: '',\n      sortable: true,\n      cell: row => (\n        row.status === 'paid' ? < Badge className='text-capitalize' color={statusObj.active} pill>\n          paid\n        </Badge > : < Badge className='text-capitalize' color={statusObj.pending} pill>\n          progress\n        </Badge >\n      )\n    },\n    {\n      name: 'Change',\n      minWidth: '200px',\n      selector: '',\n      sortable: true,\n      cell: row => (\n        <FormGroup id=\"status\" style={{ marginTop: '1rem', width:'80%' }}>\n          <Input type='select' value={row.status} onChange={(e) => onChangeStatus(e.target.value, row._id)} name='select' >\n            <option value='paid'>paid</option>\n            <option value=\"progress\">progress</option>\n          </Input>\n        </FormGroup>\n      )\n    },\n    {\n      name: 'action',\n      minWidth: '138px',\n      selector: '',\n      sortable: true,\n      cell: row => (\n        <Button id=\"save\" style={{ background: '#283046 !important' }} onClick={() => onSave(row.id, row.status)}>Save</Button>\n      )\n    }\n\n    // {\n    //   name: 'Actions',\n    //   minWidth: '100px',\n    //   selector: 'fullName',\n    //   sortable: true,\n    //   cell: row => (\n    //     <UncontrolledDropdown>\n    //       <DropdownToggle tag='div' className='btn btn-sm'>\n    //         <MoreVertical size={14} className='cursor-pointer' />\n    //       </DropdownToggle>\n    //       <DropdownMenu right>\n    //         <DropdownItem\n    //           tag={Link}\n    //           to={`/apps/user/view/${row.id}`}\n    //           className='w-100'\n    //           onClick={() => store.dispatch(getUser(row.id))}\n    //         >\n    //           <FileText size={14} className='mr-50' />\n    //           <span className='align-middle'>Details</span>\n    //         </DropdownItem>\n    //         <DropdownItem\n    //           tag={Link}\n    //           to={`/apps/user/edit/${row.id}`}\n    //           className='w-100'\n    //           onClick={() => store.dispatch(getUser(row.id))}\n    //         >\n    //           <Archive size={14} className='mr-50' />\n    //           <span className='align-middle'>Edit</span>\n    //         </DropdownItem>\n    //         <DropdownItem className='w-100'>\n    //           <Trash2 size={14} className='mr-50' />\n    //           <span className='align-middle'>Delete</span>\n    //         </DropdownItem>\n    //       </DropdownMenu>\n    //     </UncontrolledDropdown>\n    //   )\n    // }\n  ]\n\n  // ** Function to toggle sidebar\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)\n\n  // ** Get data on mount\n\n  useEffect(async () => {\n    const url = 'https://admin.solview.app/ido/initData'\n    const userData = await Axios.get(url)\n    if (userData.data.data) {\n      console.log(userData.data.data, \"data\")\n      setAllData(userData.data.data)\n    }\n  }, [])\n  useEffect(() => {\n    dispatch(getAllData())\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        currentPlan: currentPlan.value,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n  }, [dispatch])\n\n  // ** User filter options\n  const roleOptions = [\n    { value: '', label: 'Select Role' },\n    { value: 'admin', label: 'Admin' },\n    { value: 'author', label: 'Author' },\n    { value: 'editor', label: 'Editor' },\n    { value: 'maintainer', label: 'Maintainer' },\n    { value: 'subscriber', label: 'Subscriber' }\n  ]\n\n  const planOptions = [\n    { value: '', label: 'Select Plan' },\n    { value: 'basic', label: 'Basic' },\n    { value: 'company', label: 'Company' },\n    { value: 'enterprise', label: 'Enterprise' },\n    { value: 'team', label: 'Team' }\n  ]\n\n  const statusOptions = [\n    { value: '', label: 'Select Status', number: 0 },\n    { value: 'pending', label: 'Pending', number: 1 },\n    { value: 'active', label: 'Active', number: 2 },\n    { value: 'inactive', label: 'Inactive', number: 3 }\n  ]\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getData({\n        page: page.selected + 1,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        currentPlan: currentPlan.value,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: value,\n        role: currentRole.value,\n        currentPlan: currentPlan.value,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        currentPlan: currentPlan.value,\n        status: currentStatus.value,\n        q: val\n      })\n    )\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number((allData / rowsPerPage).toFixed(0))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pr-1'}\n      />\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    // const filters = {\n    //   role: currentRole.value,\n    //   currentPlan: currentPlan.value,\n    //   status: currentStatus.value,\n    //   q: searchTerm\n    // }\n\n    // const isFiltered = Object.keys(filters).some(function (k) {\n    //   return filters[k].length > 0\n    // })\n\n    // if (store.data.length > 0) {\n    //   return store.data\n    // } else if (store.data.length === 0 && isFiltered) {\n    //   return []\n    // } else {\n    //   return store.allData.slice(0, rowsPerPage)\n    // }\n    return allData.slice(0, rowsPerPage)\n  }\n\n  return (\n    <Fragment>\n      {/* <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Search Filter</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col md='4'>\n              <Select\n                isClearable={false}\n                theme={selectThemeColors}\n                className='react-select'\n                classNamePrefix='select'\n                options={roleOptions}\n                value={currentRole}\n                onChange={data => {\n                  setCurrentRole(data)\n                  dispatch(\n                    getData({\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      role: data.value,\n                      currentPlan: currentPlan.value,\n                      status: currentStatus.value,\n                      q: searchTerm\n                    })\n                  )\n                }}\n              />\n            </Col>\n            <Col className='my-md-0 my-1' md='4'>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={planOptions}\n                value={currentPlan}\n                onChange={data => {\n                  setCurrentPlan(data)\n                  dispatch(\n                    getData({\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      role: currentRole.value,\n                      currentPlan: data.value,\n                      status: currentStatus.value,\n                      q: searchTerm\n                    })\n                  )\n                }}\n              />\n            </Col>\n            <Col md='4'>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={statusOptions}\n                W\n                value={currentStatus}\n                onChange={data => {\n                  setCurrentStatus(data)\n                  dispatch(\n                    getData({\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      role: currentRole.value,\n                      currentPlan: currentPlan.value,\n                      status: data.value,\n                      q: searchTerm\n                    })\n                  )\n                }}\n              />\n            </Col>\n          </Row>\n        </CardBody>\n      </Card> */}\n\n      <Card>\n        <DataTable\n          noHeader\n          pagination\n          subHeader\n          responsive\n          paginationServer\n          columns={columns}\n          sortIcon={<ChevronDown />}\n          className='react-dataTable'\n          paginationComponent={CustomPagination}\n          data={allData}\n        // subHeaderComponent={\n        //   <CustomHeader\n        //     toggleSidebar={toggleSidebar}\n        //     handlePerPage={handlePerPage}\n        //     rowsPerPage={rowsPerPage}\n        //     searchTerm={searchTerm}\n        //     handleFilter={handleFilter}\n        //   />\n        // }\n        />\n      </Card>\n\n      <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} />\n    </Fragment>\n  )\n}\n\nexport default UsersList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst UsersList = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default UsersList\n","// ** Third Party Components\nimport { X } from 'react-feather'\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap'\n\nconst Sidebar = props => {\n  // ** Props\n  const {\n    width,\n    open,\n    toggleSidebar,\n    size,\n    bodyClassName,\n    contentClassName,\n    wrapperClassName,\n    headerClassName,\n    className,\n    title,\n    children,\n    closeBtn,\n    ...rest\n  } = props\n\n  // ** If user passes custom close btn render that else default close btn\n  const renderCloseBtn = closeBtn ? closeBtn : <X className='cursor-pointer' size={15} onClick={toggleSidebar} />\n\n  return (\n    <Modal\n      isOpen={open}\n      toggle={toggleSidebar}\n      contentClassName={classnames({\n        [contentClassName]: contentClassName\n      })}\n      modalClassName={classnames('modal-slide-in', {\n        [wrapperClassName]: wrapperClassName\n      })}\n      className={classnames({\n        [className]: className,\n        'sidebar-lg': size === 'lg',\n        'sidebar-sm': size === 'sm'\n      })}\n      /*eslint-disable */\n      {...(width !== undefined\n        ? {\n            style: { width: String(width) + 'px' }\n          }\n        : {})}\n      /*eslint-enable */\n      {...rest}\n    >\n      <ModalHeader\n        className={classnames({\n          [headerClassName]: headerClassName\n        })}\n        toggle={toggleSidebar}\n        close={renderCloseBtn}\n        tag='div'\n      >\n        <h5 className='modal-title'>\n          <span className='align-middle'>{title}</span>\n        </h5>\n      </ModalHeader>\n      <ModalBody\n        className={classnames('flex-grow-1', {\n          [bodyClassName]: bodyClassName\n        })}\n      >\n        {children}\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default Sidebar\n\n// ** PropTypes\nSidebar.propTypes = {\n  title: Proptypes.string.isRequired,\n  open: Proptypes.bool.isRequired,\n  toggleSidebar: Proptypes.func.isRequired,\n  size: Proptypes.oneOf(['sm', 'lg']),\n  className: Proptypes.string,\n  bodyClassName: Proptypes.string,\n  contentClassName: Proptypes.string,\n  wrapperClassName: Proptypes.string,\n  children: Proptypes.any.isRequired,\n  width: Proptypes.oneOfType([Proptypes.number, Proptypes.string])\n}\n","import axios from 'axios'\n\n// ** Get all Data\nexport const getAllData = () => {\n  return async dispatch => {\n    await axios.get('/api/users/list/all-data').then(response => {\n      console.log(response, \"allData\")\n      dispatch({\n        type: 'GET_ALL_DATA',\n        data: response.data\n      })\n    })\n  }\n}\n\n// ** Get data on page or row change\nexport const getData = params => {\n  return async dispatch => {\n    await axios.get('/api/users/list/data', params).then(response => {\n      console.log(response, \"subData\")\n      dispatch({\n        type: 'GET_DATA',\n        data: response.data.users,\n        totalPages: response.data.total,\n        params\n      })\n    })\n  }\n}\n\n// ** Get User\nexport const getUser = id => {\n  return async dispatch => {\n    await axios\n      .get('/api/users/user', { id })\n      .then(response => {\n        dispatch({\n          type: 'GET_USER',\n          selectedUser: response.data.user\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\n"],"sourceRoot":""}