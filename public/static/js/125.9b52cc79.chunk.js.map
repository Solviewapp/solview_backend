{"version":3,"sources":["views/forms/form-repeater/RepeatingForm.js","views/forms/form-repeater/index.js","@core/components/breadcrumbs/index.js","@core/components/repeater/index.js"],"names":["RepeatingForm","withStyles","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","newData","id","Date","getTime","projectImg","projectImgFile","projectImgName","blockchainImg","blockchainImgFile","blockchainImgName","projectName","tokenName","website","twitter","discord","medium","telegram","status","startDate","endDate","price","totalAmount","slider","detailText","detailPhoto","detailPhotoFile","detailPhotoName","display","level1","level2","level3","level4","level5","level6","useState","allData","setAllData","data","setData","count","setCount","onSave","i","a","index","findIndex","e","formData","FormData","dataKeys","Object","keys","length","append","axios","post","alert","useEffect","get","result","console","log","Card","CardBody","Row","className","Tag","SlideDown","Form","Col","sm","md","Label","for","FormGroup","src","Button","Ripple","tag","Input","name","accept","hidden","onChange","URL","createObjectURL","target","files","type","required","value","Number","class","rows","readOnly","onClick","outline","onEdit","CardFooter","size","FormRepeater","BreadCrumbs","props","breadCrumbTitle","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","breadCrumbActive","to","right","Link","Repeater","children","component","rest","items","push","defaultProps"],"mappings":"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","file":"static/js/125.9b52cc79.chunk.js","sourcesContent":["import { useState, Fragment, useEffect } from 'react'\nimport Repeater from '@components/repeater'\nimport { Row, Col, Card, CardHeader, CardBody, Form, FormGroup, Label, Input, Button, CardFooter } from 'reactstrap'\nimport { X, Plus, Check, Edit } from 'react-feather'\nimport PropTypes from 'prop-types'\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\nimport Slider from '@material-ui/core/Slider'\nimport Flatpickr from 'react-flatpickr'\nimport axios from 'axios'\nimport DateTimePicker from 'react-datetime-picker'\nimport \"../../../assets/scss/views/lanuchpad/lanuchpad.scss\"\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport SlideDown from 'react-slidedown'\n\nconst PrettoSlider = withStyles({\n  root: {\n    color: '#52af77',\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit'\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)'\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4\n  }\n})(Slider)\n\nconst RepeatingForm = () => {\n  const newData = {\n    id: (new Date()).getTime(),\n    projectImg: '',\n    projectImgFile: '',\n    projectImgName: '',\n    blockchainImg: '',\n    blockchainImgFile: '',\n    blockchainImgName: '',\n    projectName: '',\n    tokenName: '',\n    website: '',\n    twitter: '',\n    discord: '',\n    medium: '',\n    telegram: '',\n    status: 'live',\n    startDate: new Date(),\n    endDate: new Date(),\n    price: '',\n    totalAmount: '',\n    slider: 0,\n    detailText: '',\n    detailPhoto: '',\n    detailPhotoFile: '',\n    detailPhotoName: '',\n    display: 'disable',\n    level1: 0,\n    level2: 0,\n    level3: 0,\n    level4: 0,\n    level5: 0,\n    level6: 0\n  }\n  const [allData, setAllData] = useState([])\n  const [data, setData] = useState(newData)\n  const [count, setCount] = useState(0)\n  const onSave = async (i) => {\n    const index = allData.findIndex(e => e.id === data.id)\n    if (index === -1 || index === i) {\n      allData[i] = data\n      if (data.projectImgName && data.tokenName && data.projectImg && data.projectImgFile && data.projectImgName && data.blockchainImg && data.blockchainImgFile && data.blockchainImgName && data.startDate && data.endDate && data.price && data.totalAmount && data.detailText) {\n        const formData = new FormData()\n        const dataKeys = Object.keys(data)\n        for (let i = 0; i < dataKeys.length; i++) {\n          formData.append(dataKeys[i], data[dataKeys[i]])\n        }\n        const result = await axios.post(\n          'https://admin.solview.app/launchFile',\n          formData\n        )\n        setCount(null)\n      } else {\n        alert(\"you have to input all fields except for website, discord, telegram,medium,twitter,detail Image\")\n      }\n    }\n  }\n\n  const onEdit = (i) => {\n    setCount(i)\n    setData(allData[i])\n\n  }\n\n  const deleteForm = (i) => {\n    setAllData(allData.filter(e => e.id !== allData[i].id))\n  }\n\n  const increaseCount = () => {\n    setAllData([...allData, newData])\n    setData(newData)\n    setCount(allData.length)\n  }\n\n  useEffect(async () => {\n    const result = await axios.get(\n      'https://admin.solview.app/launch/init'\n    )\n    console.log(result, \"result\")\n    if (result.data.data) {\n      setAllData(result.data.data)\n      setData(result.data.data[0])\n    }\n  }, [])\n\n  return (\n    <Card>\n      <CardBody>\n        <Row className='align-items-center '>\n        </Row>\n        <Repeater count={allData.length}>\n          {i => {\n            const Tag = i === 0 ? 'div' : SlideDown\n            return (\n              <Tag key={i}>\n                <Form>\n                  <Row className='align-items-center'>\n                    {\n                      i === count ? (\n                        <Row className='justify-content-between align-items-center'>\n                          <Col sm={12}>\n                            <hr />\n                          </Col>\n                          <Col md={2}>\n                            <Label for='project-logo'>Project Logo</Label>\n                            <FormGroup>\n                              <img className='projectImg' src={data.projectImg}></img>\n                              <Button.Ripple id='change-img' tag={Label} className='mr-75 mb-0' color='primary'>\n                                <span className='d-none d-sm-block'>Change</span>\n                                <span className='d-block d-sm-none'>Change\n                                </span>\n                                <Input name='project-logo' accept='image/*' hidden id='project-logos' onChange={(e) => { setData({ ...data, projectImg: URL.createObjectURL(e.target.files[0]), projectImgFile: e.target.files[0], projectImgName: (new Date()).getTime() + e.target.files[0].name }) }} type=\"file\" required />\n                              </Button.Ripple>\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <Label for='project-logo'>Blockchain Logo</Label>\n                            <FormGroup>\n                              <img className=\"blockchainImg\" src={data.blockchainImg}></img>\n                              <Button.Ripple id='change-img' tag={Label} className='mr-75 mb-0' color='primary'>\n                                <span className='d-none d-sm-block'>Change</span>\n                                <span className='d-block d-sm-none'>\n                                  Change\n                                </span>\n                                <Input name='project-logo' accept='image/*' hidden id='project-logo' onChange={(e) => {\n                                  setData({ ...data, blockchainImg: URL.createObjectURL(e.target.files[0]), blockchainImgFile: e.target.files[0], blockchainImgName: (new Date()).getTime() + e.target.files[0].name })\n                                }} type=\"file\" required />\n                              </Button.Ripple>\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`projectName-${i}`}>Project Name</Label>\n                              <Input type='text' id={`projectName-${i}`} value={data.projectName}\n                                onChange={(e) => setData({ ...data, projectName: e.target.value })} required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`tokenName-${i}`}>Token Name</Label>\n                              <Input type='text' id={`tokenName-${i}`} value={data.tokenName} onChange={(e) => setData({ ...data, tokenName: e.target.value })} required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`website-${i}`}>Website</Label>\n                              <Input type='text' id={`website-${i}`} value={data.website} onChange={(e) => setData({ ...data, website: e.target.value })} required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`twitter-${i}`}>Twitter</Label>\n                              <Input type='text' id={`twitter-${i}`} value={data.twitter} onChange={(e) => setData({ ...data, twitter: e.target.value })} required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`discord-${i}`}>Discord</Label>\n                              <Input type='text' id={`discord-${i}`} value={data.discord} onChange={(e) => { setData({ ...data, discord: e.target.value }) }} required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`medium-${i}`}>Medium</Label>\n                              <Input type='text' id={`medium-${i}`} value={data.medium} onChange={(e) => { setData({ ...data, medium: e.target.value }) }} required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`telegram-${i}`}>Telegram</Label>\n                              <Input type='text' id={`telegram-${i}`} value={data.telegram} onChange={(e) => setData({ ...data, telegram: e.target.value })} required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for='status'>Status</Label>\n                              <Input type='select' value={data.status} onChange={(e) => setData({ ...data, status: e.target.value })} id={`status-${i}`} name='status' required>\n                                <option value='live'>Live</option>\n                                <option value='upcoming'>Upcoming</option>\n                                <option value='ended'>Ended</option>\n                              </Input>\n                            </FormGroup>\n                          </Col>\n                          <Col md={4}>\n                            <Fragment>\n                              <Label for='default-picker'>Start Date/End Date</Label>\n                              <Col md={12}>\n                                <DateTimePicker id=\"startDate\" onChange={(e) => { setData({ ...data, startDate: e }) }} value={new Date(data.startDate)} />\n                              </Col>\n                              <Col md={12}>\n                                <DateTimePicker id=\"endDate\" onChange={(e) => { setData({ ...data, endDate: e }) }} value={new Date(data.endDate)} />\n                              </Col>\n                            </Fragment>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`price-${i}`}>Price</Label>\n                              <Input type='number' id={`price-${i}`} value={data.price} onChange={(e) => setData({ ...data, price: e.target.value })} required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`totalAmount-${i}`}>Total amount</Label>\n                              <Input type='number' id={`totalAmount-${i}`} value={data.totalAmount} onChange={(e) => setData({ ...data, totalAmount: e.target.value })} required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`slider-${i}`}>Total Percent</Label>\n                              <Input type='number' id={`totalAmount-${i}`} value={Number(data.slider)} onChange={(e) => setData({ ...data, slider: e.target.value })} required />\n                              {/* <PrettoSlider id={`slider-${i}`} onChange={(e) => {\n                                console.log(e.target.innerText)\n                                setData({ ...data, slider: Number(e.target.innerText) })\n                              }} valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" defaultValue={Number(data.slider)} innerText={Number(data.slider)} /> */}\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for='status'>display</Label>\n                              <Input type='select' onChange={(e) => { setData({ ...data, display: e.target.value }) }} value={data.display} id={`status-${i}`} name='status' required>\n                                <option value='enable'>enable</option>\n                                <option value='disable'>disable</option>\n                              </Input>\n                            </FormGroup>\n                          </Col>\n\n                          <Col md={4} sm={4}>\n                            <Label>Detail Image</Label>\n                            <FormGroup>\n                              <img class=\"detailImg\" src={data.detailPhoto} id={`detailImg-${i}`}></img>\n                              <Button.Ripple id='change-img' tag={Label} className='mr-75 mb-0' color='primary'>\n                                <span className='d-none d-sm-block'>Change</span>\n                                <span className='d-block d-sm-none'>Change\n                                </span>\n                                <Input name='project-logo' accept='image/*' hidden id='project-logo' onChange={(e) => {\n                                  setData({ ...data, detailPhotoFile: e.target.files[0], detailPhotoName: (new Date()).getTime() + e.target.files[0].name, detailPhoto: URL.createObjectURL(e.target.files[0]) })\n                                }} type=\"file\" required />\n                              </Button.Ripple>\n                            </FormGroup>\n                          </Col>\n                          <Col md={4} sm={4}>\n                            <FormGroup>\n                              <Label>Detail</Label>\n                              <Input type='textarea' name='text' value={data.detailText} onChange={(e) => setData({ ...data, detailText: e.target.value })} id={`detailText-${i}`} rows='3' required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2} sm={2}>\n                            <FormGroup>\n                              <Label for={`price-${i}`}>5,000SOLV to 9,999SOLV</Label>\n                              <Input type='number' id={`price-${i}`} value={data.level1} onChange={(e) => setData({ ...data, level1: e.target.value })} required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`price-${i}`}>10,000SOLV to 19,999SOLV</Label>\n                              <Input type='number' id={`price-${i}`} value={data.level2} onChange={(e) => setData({ ...data, level2: e.target.value })} required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`price-${i}`}>20,000SOLV to 49,999SOLV</Label>\n                              <Input type='number' id={`price-${i}`} value={data.level3} onChange={(e) => setData({ ...data, level3: e.target.value })} required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2} sm={2}>\n                            <FormGroup>\n                              <Label for={`price-${i}`}>50,000SOLV to 99,999SOLV</Label>\n                              <Input type='number' id={`price-${i}`} value={data.level4} onChange={(e) => setData({ ...data, level4: e.target.value })} required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`price-${i}`}>100,000SOLV to 249,999SOLV</Label>\n                              <Input type='number' id={`price-${i}`} value={data.level5} onChange={(e) => setData({ ...data, level5: e.target.value })} required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`price-${i}`}>250,000SOLV and above</Label>\n                              <Input type='number' id={`price-${i}`} value={data.level6} onChange={(e) => setData({ ...data, level6: e.target.value })} required />\n                            </FormGroup>\n                          </Col>\n                        </Row>\n                      ) : (\n                        <Row className='justify-content-between align-items-center'>\n                          <Col sm={12}>\n                            <hr />\n                          </Col>\n                          <Col md={2}>\n                            <Label for='project-logo'>Project Logo</Label>\n                            <FormGroup>\n                              <img className='projectImg' src={allData[i].projectImg}></img>\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <Label for='project-logo'>Blockchain Logo</Label>\n                            <FormGroup>\n                              <img className=\"blockchainImg\" src={allData[i].blockchainImg}></img>\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`projectName-${i}`}>Project Name</Label>\n                              <Input type='text' id={`projectName-${i}`} value={allData[i].projectName}\n                                readOnly\n                                required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`tokenName-${i}`}>Token Name</Label>\n                              <Input type='text' id={`tokenName-${i}`} value={allData[i].tokenName} readOnly required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`website-${i}`}>Website</Label>\n                              <Input type='text' id={`website-${i}`} value={allData[i].website} readOnly required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`twitter-${i}`}>Twitter</Label>\n                              <Input type='text' id={`twitter-${i}`} value={allData[i].twitter} readOnly required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`discord-${i}`}>Discord</Label>\n                              <Input type='text' id={`discord-${i}`} value={allData[i].discord} readOnly required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`medium-${i}`}>Medium</Label>\n                              <Input type='text' id={`medium-${i}`} value={allData[i].medium} readOnly required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`telegram-${i}`}>Telegram</Label>\n                              <Input type='text' id={`telegram-${i}`} value={allData[i].telegram} readOnly required />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for='status'>Status</Label>\n                              <Input type='text' value={allData[i].status} readOnly id={`status-${i}`} name='status' required>\n                              </Input>\n                            </FormGroup>\n                          </Col>\n                          <Col md={4}>\n                            <Fragment>\n                              <Label for='default-picker'>Start Date/End Date</Label>\n                              <Col md={12}>\n                                <DateTimePicker value={new Date(allData[i].startDate)} />\n                              </Col>\n                              <Col md={12}>\n                                <DateTimePicker value={new Date(allData[i].endDate)} />\n                              </Col>\n                            </Fragment>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`price-${i}`}>Price</Label>\n                              <Input type='number' id={`price-${i}`} value={allData[i].price} readOnly required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`totalAmount-${i}`}>Total amount</Label>\n                              <Input type='number' id={`totalAmount-${i}`} value={allData[i].totalAmount} readOnly required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`slider-${i}`}>Total percent</Label>\n                              <Input type='number' id={`totalAmount-${i}`} value={allData[i].slider} readOnly required />\n                              {/* <PrettoSlider id={`slider-${i}`} readOnly valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" defaultValue={Number(allData[i].slider)} /> */}\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`baseAmount-${i}`}>Display</Label>\n                              <Input type='text' value={allData[i].display} readOnly id={`baseAmount-${i}`} />\n                            </FormGroup>\n                          </Col>\n\n                          <Col md={4} sm={4}>\n                            <FormGroup>\n                              <img class=\"detailImg\" src={allData[i].detailPhoto} id={`detailImg-${i}`}></img>\n                            </FormGroup>\n                          </Col>\n                          <Col md={4} sm={4}>\n                            <FormGroup>\n                              <Label>Detail</Label>\n                              <Input type='textarea' name='text' value={allData[i].detailText} readOnly id={`detailText-${i}`} rows='3' required />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`baseAmount-${i}`}>5,000SOLV to 9,999SOLV</Label>\n                              <Input type='text' value={allData[i].level1} readOnly id={`baseAmount-${i}`} />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`baseAmount-${i}`}>10,000SOLV to 19,999SOLV</Label>\n                              <Input type='text' value={allData[i].level1} readOnly id={`baseAmount-${i}`} />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`baseAmount-${i}`}>20,000SOLV to 49,999SOLV</Label>\n                              <Input type='text' value={allData[i].level1} readOnly id={`baseAmount-${i}`} />\n                            </FormGroup>\n                          </Col>\n                          <Col md={2}>\n                            <FormGroup>\n                              <Label for={`baseAmount-${i}`}>20,000SOLV to 49,999SOLV</Label>\n                              <Input type='text' value={allData[i].level1} readOnly id={`baseAmount-${i}`} />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`baseAmount-${i}`}>100,000SOLV to 249,999SOLV</Label>\n                              <Input type='text' value={allData[i].level1} readOnly id={`baseAmount-${i}`} />\n                            </FormGroup>\n                            <FormGroup>\n                              <Label for={`baseAmount-${i}`}>250,000SOLV and above</Label>\n                              <Input type='text' value={allData[i].level1} readOnly id={`baseAmount-${i}`} />\n                            </FormGroup>\n                          </Col>\n\n                        </Row>\n                      )\n                    }\n                    <Col md={3} className='w-50'>\n                      {\n                        i === count ? (\n                          <Button.Ripple color='success' onClick={() => onSave(i)} outline>\n                            save\n                          </Button.Ripple>\n                        ) : (\n                          <Button.Ripple color='info' onClick={() => onEdit(i)} outline>\n                            edit\n                          </Button.Ripple>\n                        )\n                      }\n                      {/* <Button.Ripple color='danger' className='ml-2' onClick={() => deleteForm(i)} outline>\n                        delete\n                      </Button.Ripple> */}\n                    </Col>\n                  </Row>\n                </Form>\n              </Tag>\n            )\n          }}\n        </Repeater>\n      </CardBody>\n      <CardFooter>\n        <Button.Ripple className='btn-icon' color='primary' onClick={increaseCount}>\n          <Plus size={14} />\n          <span className='align-middle ml-25'>\n            Add New\n          </span>\n        </Button.Ripple>\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default RepeatingForm\n","import { Fragment } from 'react'\nimport Breadcrumbs from '@components/breadcrumbs'\nimport { Row, Col } from 'reactstrap'\nimport RepeatingForm from './RepeatingForm'\nimport RepeatingFormAnimated from './RepeatingFormAnimated'\n\nimport 'react-slidedown/lib/slidedown.css'\nconst FormRepeater = () => {\n  return (\n    <Fragment>\n      <Row>\n        <Col sm={12}>\n          <RepeatingForm />\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\n\nexport default FormRepeater\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem tag='li' className='text-primary'>\n                  {breadCrumbParent}\n                </BreadcrumbItem>\n                {breadCrumbParent2 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent2}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                {breadCrumbParent3 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent3}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                <BreadcrumbItem tag='li' active>\n                  {breadCrumbActive}\n                </BreadcrumbItem>\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\n        <div className='form-group breadcrum-right dropdown'>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' right>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <CheckSquare className='mr-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='mr-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='mr-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='mr-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  breadCrumbTitle: Proptypes.string.isRequired,\n  breadCrumbActive: Proptypes.string.isRequired\n}\n","// ** Third Party Components\nimport PropTypes from 'prop-types'\n\nconst Repeater = props => {\n  // ** Props\n  const { count, tag, component, children, ...rest } = props\n\n  // ** Custom Tag\n  const Tag = tag\n\n  // ** Default Items\n  const items = []\n\n  // ** Loop passed count times and push it in items Array\n  for (let i = 0; i < count; i++) {\n    items.push(children(i))\n  }\n\n  return <Tag {...rest}>{items}</Tag>\n}\n\n// ** PropTypes\nRepeater.propTypes = {\n  count: PropTypes.number.isRequired,\n  tag: PropTypes.string.isRequired\n}\n\n// ** Default Props\nRepeater.defaultProps = {\n  tag: 'div'\n}\n\nexport default Repeater\n"],"sourceRoot":""}