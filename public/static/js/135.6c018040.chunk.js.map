{"version":3,"sources":["views/forms/form-elements/staking/StakingContent.js","views/forms/form-elements/staking/data.js","views/forms/form-elements/staking/store/actions/index.js","views/forms/form-elements/staking/TableServerSide.js","views/forms/form-elements/staking/index.js","@core/components/card-snippet/index.js"],"names":["require","web3","SystemProgram","Keypair","programID","SYSVAR_CLOCK_PUBKEY","PublicKey","poolKey","fromSecretKey","Uint8Array","poolSecret","opts","StakingContent","publicKey","useWallet","wallet","connection","useConnection","useState","balance","setBalance","depositVal","setDepositVal","withdrawVal","setWithdrawVal","rewardAmount","setRewardAmount","usercount","setUsercount","getAccontData","a","axios","get","accData","data","length","getProvider","provider","Provider","getWalletBalance","pubkey","getTokenAccountsByOwner","mint","tokens","value","token","pop","getTokenAccountBalance","val","uiAmount","getAllData","program","Program","idl","account","pool","fetch","poolObject","adminRewardAmount","toNumber","fund","amount","alert","pubkeyToUse","stakingMintObject","Token","TOKEN_PROGRAM_ID","payer","getOrCreateAssociatedAccountInfo","stakingAccountInfo","stakingPubkey","address","findProgramAddress","toBuffer","_poolSigner","poolSigner","rpc","fundStaking","BN","accounts","stakingVault","funder","from","tokenProgram","console","log","withdraw","useEffect","Card","CardBody","Row","Col","md","sm","Label","toFixed","FormGroup","for","Input","type","onChange","e","target","id","Button","onClick","me","then","response","serverSideColumns","name","selector","sortable","minWidth","cell","row","href","getData","params","dispatch","allData","invoices","totalPages","total","DataTableServerSide","useDispatch","useSelector","state","dataTables","currentPage","setCurrentPage","rowsPerPage","searchValue","stakedData","setStakedData","page","perPage","q","userData","i","userOne","_userPubkey","user","Adata","staked_amount_7","balanceStakedA","staked_amount_14","balanceStakedB","staked_amount_30","balanceStakedC","staked_time_7","Date","stakeTimeA","toISOString","staked_time_14","stakeTimeB","staked_time_30","stakeTimeC","getTime","reward_14","rewardBRate","lastUpdateTimeB","reward_30","rewardCRate","lastUpdateTimeC","push","CardHeader","className","CardTitle","tag","noHeader","pagination","paginationServer","columns","sortIcon","size","paginationComponent","count","Number","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","breakClassName","breakLinkClassName","containerClassName","memo","InputGroups","Prism","highlightAll","title","TableServerSide","CardSnippet","props","children","noBody","code","iconCode","isOpen","setIsOpen","IconCode","Wrapper","Fragment"],"mappings":"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","file":"static/js/135.6c018040.chunk.js","sourcesContent":["import { Card, CardBody, FormGroup, Label, Input, CustomInput, Button, Row, Col } from 'reactstrap'\nimport { PublicKey } from '@solana/web3.js'\nimport { Program, Provider, web3, BN } from '@project-serum/anchor'\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\"\nimport idl from '../../../../json/idl.json'\nimport poolSecret from '../../../../json/pool.json'\nimport {\n  useWallet,\n  useConnection\n} from '@solana/wallet-adapter-react'\nimport axios from \"axios\"\nimport { useEffect, useState } from 'react'\nrequire('@solana/wallet-adapter-react-ui/styles.css')\nconst anchor = require('@project-serum/anchor')\nconst { SystemProgram, Keypair, SYSVAR_CLOCK_PUBKEY } = web3\nconst programID = new PublicKey(\"E4VP5CqmKCy7HLzCyZg3FaKLoCE5M9nLhyZLWPMjeeQ6\")\n\nconst poolKey = Keypair.fromSecretKey(new Uint8Array(poolSecret))\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}\nconst StakingContent = () => {\n  const { publicKey } = useWallet()\n  const wallet = useWallet()\n  const { connection } = useConnection()\n  const [balance, setBalance] = useState(0.0)\n  const [depositVal, setDepositVal] = useState(0)\n  const [withdrawVal, setWithdrawVal] = useState(0)\n  const [rewardAmount, setRewardAmount] = useState(0)\n  const [usercount, setUsercount] = useState(0)\n\n  const getAccontData = async () => {\n    const url = 'https://admin.solview.app/staking/init'\n    const accData = await axios.get(url)\n    if (accData.data.data) {\n      setUsercount(accData.data.data.length)\n    }\n  }\n\n  const getProvider = async () => {\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment\n    )\n    return provider\n  }\n\n  const getWalletBalance = async (pubkey) => {\n    if (!wallet.publicKey) {\n      return 0\n    }\n\n    const provider = await getProvider()\n    const tokens = await provider.connection.getTokenAccountsByOwner(wallet.publicKey, { mint: pubkey })\n    if (tokens.value.length === 0) {\n      return 0\n    }\n    const token = tokens.value.pop()\n    const val = (await provider.connection.getTokenAccountBalance(token.pubkey)).value\n    setBalance(val.uiAmount)\n  }\n  const getAllData = async () => {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n    const poolObject = await program.account.pool.fetch(poolKey.publicKey)\n    setRewardAmount(poolObject.adminRewardAmount.toNumber() / (10 ** 6))\n  }\n\n  const authorizeFunder = async (newFunder) => {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n    const pubkeyToUse = poolKey.publicKey\n    await program.rpc.authorizeFunder(\n      newFunder,\n      {\n        accounts: {\n          pool: pubkeyToUse,\n          authority: provider.wallet.publicKey\n        }\n      })\n  }\n\n  const deauthorizeFunder = async (oldFunder) => {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n    const pubkeyToUse = poolKey.publicKey\n    await program.rpc.deauthorizeFunder(\n      oldFunder,\n      {\n        accounts: {\n          pool: pubkeyToUse,\n          authority: provider.wallet.publicKey\n        }\n      })\n  }\n\n  const fund = async (amount) => {\n    if (amount === 0) {\n      alert(\"Balance is 0!\")\n      return\n    }\n    if (amount > balance) {\n      alert(\"This is more than your balance!\")\n      return\n    }\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n    const pubkeyToUse = poolKey.publicKey\n    const poolObject = await program.account.pool.fetch(pubkeyToUse)\n\n    const stakingMintObject = new Token(\n      provider.connection,\n      new PublicKey('7q3AdgKuMeDRnjaMQs7ppXjaw4HUxjsdyMrrfiSZraiN'),\n      TOKEN_PROGRAM_ID,\n      provider.wallet.payer)\n    const stakingAccountInfo = await stakingMintObject.getOrCreateAssociatedAccountInfo(wallet.publicKey)\n    const stakingPubkey = stakingAccountInfo.address\n    const [\n      _poolSigner,\n      _nonce\n    ] = await PublicKey.findProgramAddress(\n      [pubkeyToUse.toBuffer()],\n      programID\n    )\n    const poolSigner = _poolSigner\n    try {\n      await program.rpc.fundStaking(\n        new BN(amount * (10 ** 6)),\n        {\n          accounts: {\n            // Stake instance.\n            pool: pubkeyToUse,\n            stakingVault: poolObject.stakingVault,\n            funder: provider.wallet.publicKey,\n            from: stakingPubkey,\n            // Program signers.\n            poolSigner,\n            // Misc.\n            tokenProgram: TOKEN_PROGRAM_ID\n          }\n        })\n      getAllData()\n      getWalletBalance(new PublicKey(\"7q3AdgKuMeDRnjaMQs7ppXjaw4HUxjsdyMrrfiSZraiN\"))\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const withdraw = async (amount) => {\n    const provider = await getProvider()\n\n    if (amount === 0) {\n      alert(\"Balance is 0!\")\n      return\n    }\n    if (amount > rewardAmount) {\n      alert(\"This is more than your balance!\")\n      return\n    }\n\n\n    const program = new Program(idl, programID, provider)\n    const pubkeyToUse = poolKey.publicKey\n    const poolObject = await program.account.pool.fetch(pubkeyToUse)\n\n    const stakingMintObject = new Token(\n      provider.connection,\n      new PublicKey('7q3AdgKuMeDRnjaMQs7ppXjaw4HUxjsdyMrrfiSZraiN'),\n      TOKEN_PROGRAM_ID,\n      provider.wallet.payer)\n    const stakingAccountInfo = await stakingMintObject.getOrCreateAssociatedAccountInfo(wallet.publicKey)\n    const stakingPubkey = stakingAccountInfo.address\n\n    const [\n      _poolSigner,\n      _nonce\n    ] = await PublicKey.findProgramAddress(\n      [pubkeyToUse.toBuffer()],\n      programID\n    )\n    const poolSigner = _poolSigner\n    try {\n\n      await program.rpc.withdraw(\n        new BN(amount * (10 ** 6)),\n        {\n          accounts: {\n            // Stake instance.\n            pool: pubkeyToUse,\n            stakingVault: poolObject.stakingVault,\n            funder: provider.wallet.publicKey,\n            from: stakingPubkey,\n            // Program signers.\n            poolSigner,\n            // Misc.\n            tokenProgram: TOKEN_PROGRAM_ID\n          }\n        })\n      getAllData()\n      getWalletBalance(new PublicKey(\"7q3AdgKuMeDRnjaMQs7ppXjaw4HUxjsdyMrrfiSZraiN\"))\n    } catch (err) {\n      console.log(err)\n    }\n\n  }\n\n  useEffect(() => {\n    if (publicKey) {\n      getAccontData()\n      getAllData()\n      getWalletBalance(new PublicKey(\"7q3AdgKuMeDRnjaMQs7ppXjaw4HUxjsdyMrrfiSZraiN\"))\n    }\n  }, [publicKey])\n  return (\n    <Card>\n      <CardBody>\n        <Row>\n          <Col md='4' sm='12'>\n            <Label>\n              SOLV Balance: {balance ? balance.toFixed(4) : 0} SOLV\n            </Label>\n          </Col>\n          <Col md='4' sm='12'>\n            <Label>\n              User Count: {usercount}\n            </Label>\n          </Col>\n          <Col md=\"4\" sm=\"12\">\n            <Label>\n              Reward Amount: {rewardAmount ? rewardAmount.toFixed(4) : 0} SOLV\n            </Label>\n          </Col>\n        </Row>\n        <Row>\n          <Col md='6' sm='12'>\n            <Row>\n              <Col md=\"12\" sm=\"12\">\n                <FormGroup>\n                  <Label for='input'>Deposit</Label>\n                  <Input type='text' value={depositVal} onChange={(e) => setDepositVal(e.target.value)} id=\"url\" />\n                </FormGroup>\n              </Col>\n              <Col md=\"12\" sm=\"12\">\n                <Row>\n                  <Col md=\"6\" sm=\"6\">\n                    <Button onClick={() => setDepositVal(balance)}>MAX</Button>\n                  </Col>\n                  <Col md=\"6\" sm=\"6\">\n                    <Button onClick={() => fund(depositVal)}>APPROVE</Button>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Col>\n          <Col md='6' sm='12'>\n            <Row>\n              <Col me=\"12\" sm=\"12\">\n                <FormGroup>\n                  <Label for='input'>Withdraw</Label>\n                  <Input type='text' value={withdrawVal} onChange={(e) => setWithdrawVal(e.target.value)} id=\"url\" />\n                </FormGroup>\n              </Col>\n              <Col md=\"12\" sm=\"12\">\n                <Row>\n                  <Col md=\"6\" sm=\"6\">\n                    <Button onClick={() => setWithdrawVal(rewardAmount)}>MAX</Button>\n                  </Col>\n                  <Col md=\"6\" sm=\"6\">\n                    <Button onClick={() => withdraw(withdrawVal)}>APPROVE</Button>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Col>\n\n        </Row>\n\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StakingContent\n","// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport axios from 'axios'\r\nimport { MoreVertical, Edit, FileText, Archive, Trash } from 'react-feather'\r\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\r\n\r\n// ** Vars\r\nconst states = ['success', 'danger', 'warning', 'info', 'dark', 'primary', 'secondary']\r\n\r\nconst status = {\r\n  1: { title: 'Current', color: 'light-primary' },\r\n  2: { title: 'Professional', color: 'light-success' },\r\n  3: { title: 'Rejected', color: 'light-danger' },\r\n  4: { title: 'Resigned', color: 'light-warning' },\r\n  5: { title: 'Applied', color: 'light-info' }\r\n}\r\n\r\nexport let data\r\n\r\n// ** Get initial Data\r\naxios.get('/api/datatables/initial-data').then(response => {\r\n  data = response.data\r\n})\r\n\r\n// ** Table Zero Config Column\r\n// export const basicColumns = [\r\n//   {\r\n//     name: 'ID',\r\n//     selector: 'id',\r\n//     sortable: true,\r\n//     maxWidth: '100px'\r\n//   },\r\n//   {\r\n//     name: 'Name',\r\n//     selector: 'full_name',\r\n//     sortable: true,\r\n//     minWidth: '225px'\r\n//   },\r\n//   {\r\n//     name: 'Email',\r\n//     selector: 'email',\r\n//     sortable: true,\r\n//     minWidth: '310px'\r\n//   },\r\n//   {\r\n//     name: 'Position',\r\n//     selector: 'post',\r\n//     sortable: true,\r\n//     minWidth: '250px'\r\n//   },\r\n//   {\r\n//     name: 'Age',\r\n//     selector: 'age',\r\n//     sortable: true,\r\n//     minWidth: '100px'\r\n//   },\r\n//   {\r\n//     name: 'Salary',\r\n//     selector: 'salary',\r\n//     sortable: true,\r\n//     minWidth: '175px'\r\n//   }\r\n// ]\r\n\r\n// ** Expandable table component\r\nconst ExpandableTable = ({ data }) => {\r\n  return (\r\n    <div className='expandable-content p-2'>\r\n      <p>\r\n        <span className='font-weight-bold'>City:</span> {data.city}\r\n      </p>\r\n      <p>\r\n        <span className='font-weight-bold'>Experience:</span> {data.experience}\r\n      </p>\r\n      <p className='m-0'>\r\n        <span className='font-weight-bold'>Post:</span> {data.post}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\n// ** Table Common Column\r\n// export const columns = [\r\n//   {\r\n//     name: 'Name',\r\n//     selector: 'full_name',\r\n//     sortable: true,\r\n//     minWidth: '250px',\r\n//     cell: row => (\r\n//       <div className='d-flex align-items-center'>\r\n//         {row.avatar === '' ? (\r\n//           <Avatar color={`light-${states[row.status]}`} content={row.full_name} initials />\r\n//         ) : (\r\n//           <Avatar img={require(`@src/assets/images/portrait/small/avatar-s-${row.avatar}`).default} />\r\n//         )}\r\n//         <div className='user-info text-truncate ml-1'>\r\n//           <span className='d-block font-weight-bold text-truncate'>{row.full_name}</span>\r\n//           <small>{row.post}</small>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n//   },\r\n//   {\r\n//     name: 'Email',\r\n//     selector: 'email',\r\n//     sortable: true,\r\n//     minWidth: '250px'\r\n//   },\r\n//   {\r\n//     name: 'Date',\r\n//     selector: 'start_date',\r\n//     sortable: true,\r\n//     minWidth: '150px'\r\n//   },\r\n\r\n//   {\r\n//     name: 'Salary',\r\n//     selector: 'salary',\r\n//     sortable: true,\r\n//     minWidth: '150px'\r\n//   },\r\n//   {\r\n//     name: 'Age',\r\n//     selector: 'age',\r\n//     sortable: true,\r\n//     minWidth: '100px'\r\n//   },\r\n//   {\r\n//     name: 'Status',\r\n//     selector: 'status',\r\n//     sortable: true,\r\n//     minWidth: '150px',\r\n//     cell: row => {\r\n//       return (\r\n//         <Badge color={status[row.status].color} pill>\r\n//           {status[row.status].title}\r\n//         </Badge>\r\n//       )\r\n//     }\r\n//   },\r\n//   {\r\n//     name: 'Actions',\r\n//     allowOverflow: true,\r\n//     cell: row => {\r\n//       return (\r\n//         <div className='d-flex'>\r\n//           <UncontrolledDropdown>\r\n//             <DropdownToggle className='pr-1' tag='span'>\r\n//               <MoreVertical size={15} />\r\n//             </DropdownToggle>\r\n//             <DropdownMenu right>\r\n//               <DropdownItem tag='a' href='/' className='w-100' onClick={e => e.preventDefault()}>\r\n//                 <FileText size={15} />\r\n//                 <span className='align-middle ml-50'>Details</span>\r\n//               </DropdownItem>\r\n//               <DropdownItem tag='a' href='/' className='w-100' onClick={e => e.preventDefault()}>\r\n//                 <Archive size={15} />\r\n//                 <span className='align-middle ml-50'>Archive</span>\r\n//               </DropdownItem>\r\n//               <DropdownItem tag='a' href='/' className='w-100' onClick={e => e.preventDefault()}>\r\n//                 <Trash size={15} />\r\n//                 <span className='align-middle ml-50'>Delete</span>\r\n//               </DropdownItem>\r\n//             </DropdownMenu>\r\n//           </UncontrolledDropdown>\r\n//           <Edit size={15} />\r\n//         </div>\r\n//       )\r\n//     }\r\n//   }\r\n// ]\r\n\r\n// ** Table Intl Column\r\n// export const multiLingColumns = [\r\n//   {\r\n//     name: 'Name',\r\n//     selector: 'full_name',\r\n//     sortable: true,\r\n//     minWidth: '200px'\r\n//   },\r\n//   {\r\n//     name: 'Position',\r\n//     selector: 'post',\r\n//     sortable: true,\r\n//     minWidth: '250px'\r\n//   },\r\n//   {\r\n//     name: 'Email',\r\n//     selector: 'email',\r\n//     sortable: true,\r\n//     minWidth: '250px'\r\n//   },\r\n//   {\r\n//     name: 'Date',\r\n//     selector: 'start_date',\r\n//     sortable: true,\r\n//     minWidth: '150px'\r\n//   },\r\n\r\n//   {\r\n//     name: 'Salary',\r\n//     selector: 'salary',\r\n//     sortable: true,\r\n//     minWidth: '150px'\r\n//   },\r\n//   {\r\n//     name: 'Status',\r\n//     selector: 'status',\r\n//     sortable: true,\r\n//     minWidth: '150px',\r\n//     cell: row => {\r\n//       return (\r\n//         <Badge color={status[row.status].color} pill>\r\n//           {status[row.status].title}\r\n//         </Badge>\r\n//       )\r\n//     }\r\n//   },\r\n//   {\r\n//     name: 'Actions',\r\n//     allowOverflow: true,\r\n//     cell: row => {\r\n//       return (\r\n//         <div className='d-flex'>\r\n//           <UncontrolledDropdown>\r\n//             <DropdownToggle className='pr-1' tag='span'>\r\n//               <MoreVertical size={15} />\r\n//             </DropdownToggle>\r\n//             <DropdownMenu right>\r\n//               <DropdownItem>\r\n//                 <FileText size={15} />\r\n//                 <span className='align-middle ml-50'>Details</span>\r\n//               </DropdownItem>\r\n//               <DropdownItem>\r\n//                 <Archive size={15} />\r\n//                 <span className='align-middle ml-50'>Archive</span>\r\n//               </DropdownItem>\r\n//               <DropdownItem>\r\n//                 <Trash size={15} />\r\n//                 <span className='align-middle ml-50'>Delete</span>\r\n//               </DropdownItem>\r\n//             </DropdownMenu>\r\n//           </UncontrolledDropdown>\r\n//           <Edit size={15} />\r\n//         </div>\r\n//       )\r\n//     }\r\n//   }\r\n// ]\r\n\r\n// ** Table Server Side Column\r\nexport const serverSideColumns = [\r\n  {\r\n    name: 'Account',\r\n    selector: 'account',\r\n    sortable: true,\r\n    minWidth: '300px',\r\n    cell: row => {\r\n      return (\r\n        <a href={`https://solscan.io/account/${row.account}`} target=\"_blank\" >\r\n          {row.account}\r\n        </a >\r\n      )\r\n    }\r\n  },\r\n  {\r\n    name: '7D Staked Amount',\r\n    selector: 'staked_amount_7',\r\n    sortable: true,\r\n    minWidth: '250px'\r\n  },\r\n  {\r\n    name: '14D Staked Amount',\r\n    selector: 'staked_amount_14',\r\n    sortable: true,\r\n    minWidth: '250px'\r\n  },\r\n  {\r\n    name: '30D Staked Amount',\r\n    selector: 'staked_amount_30',\r\n    sortable: true,\r\n    minWidth: '150px'\r\n  },\r\n  {\r\n    name: '7D Staked Time',\r\n    selector: 'staked_time_7',\r\n    sortable: true,\r\n    minWidth: '150px'\r\n  },\r\n  {\r\n    name: '14D Staked Time',\r\n    selector: 'staked_time_14',\r\n    sortable: true,\r\n    minWidth: '150px'\r\n  },\r\n  {\r\n    name: '30D Staked Time',\r\n    selector: 'staked_time_30',\r\n    sortable: true,\r\n    minWidth: '150px'\r\n  },\r\n  {\r\n    name: '14D Rewards',\r\n    selector: 'reward_14',\r\n    sortable: true,\r\n    minWidth: '150px'\r\n  },\r\n  {\r\n    name: '30D Rewards',\r\n    selector: 'reward_30',\r\n    sortable: true,\r\n    minWidth: '150px'\r\n  }\r\n]\r\n\r\n// ** Table Adv Search Column\r\n// export const advSearchColumns = [\r\n//   {\r\n//     name: 'Name',\r\n//     selector: 'full_name',\r\n//     sortable: true,\r\n//     minWidth: '200px'\r\n//   },\r\n//   {\r\n//     name: 'Email',\r\n//     selector: 'email',\r\n//     sortable: true,\r\n//     minWidth: '250px'\r\n//   },\r\n//   {\r\n//     name: 'Post',\r\n//     selector: 'post',\r\n//     sortable: true,\r\n//     minWidth: '250px'\r\n//   },\r\n//   {\r\n//     name: 'City',\r\n//     selector: 'city',\r\n//     sortable: true,\r\n//     minWidth: '150px'\r\n//   },\r\n//   {\r\n//     name: 'Date',\r\n//     selector: 'start_date',\r\n//     sortable: true,\r\n//     minWidth: '150px'\r\n//   },\r\n\r\n//   {\r\n//     name: 'Salary',\r\n//     selector: 'salary',\r\n//     sortable: true,\r\n//     minWidth: '100px'\r\n//   }\r\n// ]\r\n\r\nexport default ExpandableTable\r\n","import axios from 'axios'\r\n\r\n// ** Get table Data\r\nexport const getData = params => {\r\n  return async dispatch => {\r\n    await axios.get('/api/datatables/data', params).then(response => {\r\n      dispatch({\r\n        type: 'GET_DATA',\r\n        allData: response.data.allData,\r\n        data: response.data.invoices,\r\n        totalPages: response.data.total,\r\n        params\r\n      })\r\n    })\r\n  }\r\n}\r\n","// ** React Imports\r\nimport { Fragment, useState, useEffect, memo } from 'react'\r\n\r\n// ** Table Column\r\nimport { serverSideColumns } from './data'\r\nimport idl from '../../../../json/idl.json'\r\nimport poolSecret from '../../../../json/pool.json'\r\n// ** Store & Actions\r\nimport { getData } from './store/actions'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport axios from \"axios\"\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport { ChevronDown } from 'react-feather'\r\nimport DataTable from 'react-data-table-component'\r\nimport { Card, CardHeader, CardTitle, Input, Label, Row, Col } from 'reactstrap'\r\nimport { PublicKey } from '@solana/web3.js'\r\nimport { Program, Provider, web3, BN } from '@project-serum/anchor'\r\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\"\r\nimport {\r\n  useWallet,\r\n  useConnection\r\n} from '@solana/wallet-adapter-react'\r\nrequire('@solana/wallet-adapter-react-ui/styles.css')\r\nconst { SystemProgram, Keypair, SYSVAR_CLOCK_PUBKEY } = web3\r\nconst programID = new PublicKey(\"E4VP5CqmKCy7HLzCyZg3FaKLoCE5M9nLhyZLWPMjeeQ6\")\r\n\r\nconst poolKey = Keypair.fromSecretKey(new Uint8Array(poolSecret))\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\nconst DataTableServerSide = () => {\r\n  // ** Store Vars\r\n  const { publicKey } = useWallet()\r\n  const wallet = useWallet()\r\n  const { connection } = useConnection()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector(state => state.dataTables)\r\n\r\n  // ** States\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [rowsPerPage, setRowsPerPage] = useState(7)\r\n  const [searchValue, setSearchValue] = useState('')\r\n  const [stakedData, setStakedData] = useState([])\r\n  // ** Get data on mount\r\n  useEffect(() => {\r\n    dispatch(\r\n      getData({\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        q: searchValue\r\n      })\r\n    )\r\n  }, [dispatch])\r\n  const getProvider = async () => {\r\n    const provider = new Provider(\r\n      connection, wallet, opts.preflightCommitment\r\n    )\r\n    return provider\r\n  }\r\n\r\n\r\n  const getAccontData = async () => {\r\n    const url = 'https://admin.solview.app/staking/init'\r\n    const accData = await axios.get(url)\r\n    const provider = await getProvider()\r\n    const program = new Program(idl, programID, provider)\r\n\r\n    if (accData.data.data) {\r\n      const userData = []\r\n      for (let i = 0; i < accData.data.data.length; i++) {\r\n        try {\r\n          const data = accData.data.data[i]\r\n          const userOne = {}\r\n          const [_userPubkey, _userNonce] = await PublicKey.findProgramAddress(\r\n            [(new PublicKey(accData.data.data[i].account)).toBuffer(), poolKey.publicKey.toBuffer()],\r\n            programID\r\n          )\r\n          const Adata = await program.account.user.fetch(_userPubkey)\r\n          userOne.account = data.account\r\n          userOne.staked_amount_7 = Adata.balanceStakedA.toNumber() / (10 ** 6)\r\n          userOne.staked_amount_14 = Adata.balanceStakedB.toNumber() / (10 ** 6)\r\n          userOne.staked_amount_30 = Adata.balanceStakedC.toNumber() / (10 ** 6)\r\n          userOne.staked_time_7 = (new Date(Adata.stakeTimeA.toNumber() * 1000)).toISOString()\r\n          userOne.staked_time_14 = (new Date(Adata.stakeTimeB.toNumber() * 1000)).toISOString()\r\n          userOne.staked_time_30 = (new Date(Adata.stakeTimeC.toNumber() * 1000)).toISOString()\r\n          if ((((new Date().getTime()) / 1000) - (Adata.stakeTimeB.toNumber())) > 14 * 24 * 60 * 60) {\r\n            userOne.reward_14 = ((Adata.rewardBRate.toNumber() / (10 ** 6)) * (((new Date().getTime()) / 1000) - (Adata.lastUpdateTimeB.toNumber()))).toFixed(6)\r\n          }\r\n          if ((((new Date().getTime()) / 1000) - (Adata.stakeTimeC.toNumber())) > 30 * 24 * 60 * 60) {\r\n            userOne.reward_30 = ((Adata.rewardCRate.toNumber() / (10 ** 6)) * (((new Date().getTime()) / 1000) - (Adata.lastUpdateTimeC.toNumber()))).toFixed(6)\r\n          }\r\n          userData.push(userOne)\r\n        } catch (e) {\r\n          console.log(e)\r\n        }\r\n      }\r\n      setStakedData(userData)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAccontData()\r\n  }, [])\r\n  // ** Function to handle filter\r\n  const handleFilter = e => {\r\n    setSearchValue(e.target.value)\r\n\r\n    dispatch(\r\n      getData({\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        q: e.target.value\r\n      })\r\n    )\r\n  }\r\n\r\n  // ** Function to handle Pagination and get data\r\n  const handlePagination = page => {\r\n    dispatch(\r\n      getData({\r\n        page: page.selected + 1,\r\n        perPage: rowsPerPage,\r\n        q: searchValue\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  // ** Function to handle per page\r\n  const handlePerPage = e => {\r\n    dispatch(\r\n      getData({\r\n        page: currentPage,\r\n        perPage: parseInt(e.target.value),\r\n        q: searchValue\r\n      })\r\n    )\r\n    setRowsPerPage(parseInt(e.target.value))\r\n  }\r\n\r\n  // ** Custom Pagination\r\n  const CustomPagination = () => {\r\n    const count = Number((stakedData / rowsPerPage).toFixed(0))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={''}\r\n        nextLabel={''}\r\n        breakLabel='...'\r\n        pageCount={count || 1}\r\n        marginPagesDisplayed={2}\r\n        pageRangeDisplayed={2}\r\n        activeClassName='active'\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={page => handlePagination(page)}\r\n        pageClassName={'page-item'}\r\n        nextLinkClassName={'page-link'}\r\n        nextClassName={'page-item next'}\r\n        previousClassName={'page-item prev'}\r\n        previousLinkClassName={'page-link'}\r\n        pageLinkClassName={'page-link'}\r\n        breakClassName='page-item'\r\n        breakLinkClassName='page-link'\r\n        containerClassName={\r\n          'pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  // ** Table data to render\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      q: searchValue\r\n    }\r\n\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n\r\n    if (store.data.length > 0) {\r\n      return store.data\r\n    } else if (store.data.length === 0 && isFiltered) {\r\n      return []\r\n    } else {\r\n      return store.allData.slice(0, rowsPerPage)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card>\r\n        <CardHeader className='border-bottom'>\r\n          <CardTitle tag='h4'>Users</CardTitle>\r\n        </CardHeader>\r\n        <Row className='mx-0 mt-1 mb-50'>\r\n          {/* <Col sm='6'>\r\n            <div className='d-flex align-items-center'>\r\n              <Label for='sort-select'>show</Label>\r\n              <Input\r\n                className='dataTable-select'\r\n                type='select'\r\n                id='sort-select'\r\n                value={rowsPerPage}\r\n                onChange={e => handlePerPage(e)}\r\n              >\r\n                <option value={7}>7</option>\r\n                <option value={10}>10</option>\r\n                <option value={25}>25</option>\r\n                <option value={50}>50</option>\r\n                <option value={75}>75</option>\r\n                <option value={100}>100</option>\r\n              </Input>\r\n              <Label for='sort-select'>entries</Label>\r\n            </div>\r\n          </Col> */}\r\n          {/* <Col className='d-flex align-items-center justify-content-sm-end mt-sm-0 mt-1' sm='6'>\r\n            <Label className='mr-1' for='search-input'>\r\n              Search\r\n            </Label>\r\n            <Input\r\n              className='dataTable-filter'\r\n              type='text'\r\n              bsSize='sm'\r\n              id='search-input'\r\n              value={searchValue}\r\n              onChange={handleFilter}\r\n            />\r\n          </Col> */}\r\n        </Row>\r\n        <DataTable\r\n          noHeader\r\n          pagination\r\n          paginationServer\r\n          className='react-dataTable'\r\n          columns={serverSideColumns}\r\n          sortIcon={<ChevronDown size={10} />}\r\n          paginationComponent={CustomPagination}\r\n          data={stakedData}\r\n        />\r\n      </Card>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default memo(DataTableServerSide)\r\n","import { Fragment, useEffect } from 'react'\nimport { Row, Col } from 'reactstrap'\nimport Prism from 'prismjs'\nimport Card from '@components/card-snippet'\nimport StakingContent from './StakingContent'\nimport TableServerSide from './TableServerSide'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nconst InputGroups = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  })\n  return (\n    <Fragment>\n      <Row className='match-height'>\n        <Col md='12' sm='12'>\n          <Card title='Staking Management'>\n            <StakingContent />\n          </Card>\n        </Col>\n        <Col md=\"12\" sm='12'>\n          <TableServerSide />\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default InputGroups\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  children: PropTypes.any,\n  code: PropTypes.node,\n  iconCode: PropTypes.node,\n  noBody: PropTypes.bool\n}\n"],"sourceRoot":""}