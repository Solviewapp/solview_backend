{"version":3,"sources":["views/apps/todo/Tasks.js","views/apps/todo/Sidebar.js","views/apps/todo/TaskSidebar.js","views/apps/todo/store/actions/index.js","views/apps/todo/index.js"],"names":["Tasks","props","query","tasks","params","setSort","dispatch","getTasks","setQuery","updateTask","selectTask","reOrderTasks","handleTaskSidebar","handleMainSidebar","renderTags","arr","badgeColor","team","low","medium","high","update","map","item","Badge","className","color","pill","renderAvatar","obj","tags","assignee","undefined","avatar","img","imgHeight","imgWidth","includes","content","fullName","initials","handleSort","e","val","preventDefault","onClick","size","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","value","onChange","target","UncontrolledDropdown","DropdownToggle","tag","href","DropdownMenu","right","DropdownItem","Link","to","options","wheelPropagation","length","list","handle","setList","newState","classnames","completed","isCompleted","CustomInput","type","id","title","label","checked","dueDate","Date","toLocaleString","month","getDate","toString","padStart","TodoSidebar","setMainSidebar","mainSidebar","handleFilter","filter","handleTag","handleActiveItem","show","Button","Ripple","block","ListGroup","ListGroupItem","action","active","capitalize","string","charAt","toUpperCase","slice","ModalHeader","children","store","setDeleted","deleted","important","setImportant","deleteTask","isObjEmpty","selectedTask","TaskSidebar","useSkin","skin","open","addTask","useState","setTitle","img1","setAssignee","setTags","desc","setDesc","setCompleted","setDueDate","assigneeOptions","handleResetFields","description","isImportant","isDeleted","push","Modal","isOpen","toggle","contentClassName","onOpened","onClosed","modalClassName","Form","onSubmit","outline","ModalBody","FormGroup","Label","for","classNamePrefix","isClearable","theme","selectThemeColors","data","components","Option","Media","src","height","width","alt","body","name","date","dateFormat","isMulti","apiKey","onEditorChange","init","menubar","toolbar","toolbar_location","content_css","newTaskTag","doesInclude","newAssignee","state","disabled","renderFooterButtons","axios","get","then","res","task","getState","post","todo","taskId","delete","TODO","sort","openTaskSidebar","setOpenTaskSidebar","useDispatch","useSelector","paramsURL","useParams","q","sortBy","useEffect","Sidebar","urlFilter"],"mappings":"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","file":"static/js/14.73da206e.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Blank Avatar Image Import\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { ReactSortable } from 'react-sortablejs'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Menu, Search, MoreVertical } from 'react-feather'\nimport {\n  Input,\n  Badge,\n  InputGroup,\n  CustomInput,\n  DropdownMenu,\n  DropdownItem,\n  InputGroupText,\n  DropdownToggle,\n  InputGroupAddon,\n  UncontrolledDropdown\n} from 'reactstrap'\n\nconst Tasks = props => {\n  // ** Props\n  const {\n    query,\n    tasks,\n    params,\n    setSort,\n    dispatch,\n    getTasks,\n    setQuery,\n    updateTask,\n    selectTask,\n    reOrderTasks,\n    handleTaskSidebar,\n    handleMainSidebar\n  } = props\n\n  // ** Function to selectTask on click\n  const handleTaskClick = obj => {\n    dispatch(selectTask(obj))\n    handleTaskSidebar()\n  }\n\n  // ** Returns avatar color based on task tag\n  const resolveAvatarVariant = tags => {\n    if (tags.includes('high')) return 'light-primary'\n    if (tags.includes('medium')) return 'light-warning'\n    if (tags.includes('low')) return 'light-success'\n    if (tags.includes('update')) return 'light-danger'\n    if (tags.includes('team')) return 'light-info'\n    return 'light-primary'\n  }\n\n  // ** Renders task tags\n  const renderTags = arr => {\n    const badgeColor = {\n      team: 'light-primary',\n      low: 'light-success',\n      medium: 'light-warning',\n      high: 'light-danger',\n      update: 'light-info'\n    }\n\n    return arr.map(item => (\n      <Badge className='text-capitalize' key={item} color={badgeColor[item]} pill>\n        {item}\n      </Badge>\n    ))\n  }\n\n  // ** Renders Avatar\n  const renderAvatar = obj => {\n    const item = obj.assignee\n\n    if (item.avatar === undefined || item.avatar === null) {\n      return <Avatar img={''} imgHeight='32' imgWidth='32' />\n    } else if (item.avatar !== '') {\n      return <Avatar img={item.avatar} imgHeight='32' imgWidth='32' />\n    } else {\n      return <Avatar color={resolveAvatarVariant(obj.tags)} content={item.fullName} initials />\n    }\n  }\n\n  const renderTasks = () => {\n    return (\n      <PerfectScrollbar className='list-group todo-task-list-wrapper' options={{ wheelPropagation: false }}>\n        {tasks.length ? (\n          <ReactSortable\n            tag='ul'\n            list={tasks}\n            handle='.drag-icon'\n            className='todo-task-list media-list'\n            setList={newState => dispatch(reOrderTasks(newState))}\n          >\n            {tasks.map(item => {\n              return (\n                <li\n                  key={item.id}\n                  onClick={() => handleTaskClick(item)}\n                  className={classnames('todo-item', {\n                    completed: item.isCompleted\n                  })}\n                >\n                  <div className='todo-title-wrapper'>\n                    <div className='todo-title-area'>\n                      <MoreVertical className='drag-icon' />\n                      <CustomInput\n                        type='checkbox'\n                        className='custom-control-Primary'\n                        id={item.title}\n                        label=''\n                        onChange={e => dispatch(updateTask({ ...item, isCompleted: e.target.checked }))}\n                        checked={item.isCompleted}\n                      />\n                      <span className='todo-title'>{item.title}</span>\n                    </div>\n                    <div className='todo-item-action mt-lg-0 mt-50'>\n                      {item.tags.length ? <div className='badge-wrapper mr-1'>{renderTags(item.tags)}</div> : null}\n                      {item.dueDate ? (\n                        <small className='text-nowrap text-muted mr-1'>\n                          {new Date(item.dueDate).toLocaleString('default', { month: 'short' })}{' '}\n                          {new Date(item.dueDate).getDate().toString().padStart(2, '0')}\n                        </small>\n                      ) : null}\n                      {item.assignee ? renderAvatar(item) : null}\n                    </div>\n                  </div>\n                </li>\n              )\n            })}\n          </ReactSortable>\n        ) : (\n          <div className='no-results show'>\n            <h5>No Items Found</h5>\n          </div>\n        )}\n      </PerfectScrollbar>\n    )\n  }\n\n  // ** Function to getTasks based on search query\n  const handleFilter = e => {\n    setQuery(e.target.value)\n    dispatch(getTasks(params))\n  }\n\n  // ** Function to getTasks based on sort\n  const handleSort = (e, val) => {\n    e.preventDefault()\n    setSort(val)\n    dispatch(getTasks({ ...params }))\n  }\n\n  return (\n    <div className='todo-app-list'>\n      <div className='app-fixed-search d-flex align-items-center'>\n        <div className='sidebar-toggle cursor-pointer d-block d-lg-none ml-1' onClick={handleMainSidebar}>\n          <Menu size={21} />\n        </div>\n        <div className='d-flex align-content-center justify-content-between w-100'>\n          <InputGroup className='input-group-merge'>\n            <InputGroupAddon addonType='prepend'>\n              <InputGroupText>\n                <Search className='text-muted' size={14} />\n              </InputGroupText>\n            </InputGroupAddon>\n            <Input placeholder='Search task' value={query} onChange={handleFilter} />\n          </InputGroup>\n        </div>\n        <UncontrolledDropdown>\n          <DropdownToggle className='hide-arrow mr-1' tag='a' href='/' onClick={e => e.preventDefault()}>\n            <MoreVertical className='text-body' size={16} />\n          </DropdownToggle>\n          <DropdownMenu right>\n            <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, 'title-asc')}>\n              Sort A-Z\n            </DropdownItem>\n            <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, 'title-desc')}>\n              Sort Z-A\n            </DropdownItem>\n            <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, 'assignee')}>\n              Sort Assignee\n            </DropdownItem>\n            <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, 'due-date')}>\n              Sort Due Date\n            </DropdownItem>\n            <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, '')}>\n              Reset Sort\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </div>\n      {renderTasks()}\n    </div>\n  )\n}\n\nexport default Tasks\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Button, ListGroup, ListGroupItem } from 'reactstrap'\nimport { Mail, Star, Check, Trash, Plus } from 'react-feather'\n\nconst TodoSidebar = props => {\n  // ** Props\n  const { handleTaskSidebar, setMainSidebar, mainSidebar, dispatch, getTasks, params } = props\n\n  // ** Functions To Handle List Item Filter\n  const handleFilter = filter => {\n    dispatch(getTasks({ ...params, filter }))\n  }\n\n  const handleTag = tag => {\n    dispatch(getTasks({ ...params, tag }))\n  }\n\n  // ** Functions To Active List Item\n  const handleActiveItem = value => {\n    if ((params.filter && params.filter === value) || (params.tag && params.tag === value)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // ** Functions To Handle Add Task Click\n  const handleAddClick = () => {\n    handleTaskSidebar()\n    setMainSidebar()\n  }\n\n  return (\n    <div\n      className={classnames('sidebar-left', {\n        show: mainSidebar === true\n      })}\n    >\n      <div className='sidebar'>\n        <div className='sidebar-content todo-sidebar'>\n          <div className='todo-app-menu'>\n            <div className='add-task'>\n              <Button.Ripple color='primary' onClick={handleAddClick} block>\n                Add Task\n              </Button.Ripple>\n            </div>\n            <PerfectScrollbar className='sidebar-menu-list' options={{ wheelPropagation: false }}>\n              <ListGroup tag='div' className='list-group-filters'>\n                <ListGroupItem\n                  action\n                  tag={Link}\n                  to={'/apps/todo/'}\n                  active={params.filter === '' && params.tag === ''}\n                  onClick={() => handleFilter('')}\n                >\n                  <Mail className='mr-75' size={18} />\n                  <span className='align-middle'>My Tasks</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  tag={Link}\n                  to={'/apps/todo/important'}\n                  active={handleActiveItem('important')}\n                  onClick={() => handleFilter('important')}\n                  action\n                >\n                  <Star className='mr-75' size={18} />\n                  <span className='align-middle'>Important</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  tag={Link}\n                  to={'/apps/todo/completed'}\n                  active={handleActiveItem('completed')}\n                  onClick={() => handleFilter('completed')}\n                  action\n                >\n                  <Check className='mr-75' size={18} />\n                  <span className='align-middle'>Completed</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  tag={Link}\n                  to={'/apps/todo/deleted'}\n                  active={handleActiveItem('deleted')}\n                  onClick={() => handleFilter('deleted')}\n                  action\n                >\n                  <Trash className='mr-75' size={18} />\n                  <span className='align-middle'>Deleted</span>\n                </ListGroupItem>\n              </ListGroup>\n              <div className='mt-3 px-2 d-flex justify-content-between'>\n                <h6 className='section-label mb-1'>Tags</h6>\n                <Plus className='cursor-pointer' size={14} />\n              </div>\n              <ListGroup className='list-group-labels'>\n                <ListGroupItem\n                  active={handleActiveItem('team')}\n                  className='d-flex align-items-center'\n                  tag={Link}\n                  to='/apps/todo/tag/team'\n                  onClick={() => handleTag('team')}\n                  action\n                >\n                  <span className='bullet bullet-sm bullet-primary mr-1'></span>\n                  <span className='align-middle'>Team</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  active={handleActiveItem('low')}\n                  className='d-flex align-items-center'\n                  tag={Link}\n                  to='/apps/todo/tag/low'\n                  onClick={() => handleTag('low')}\n                  action\n                >\n                  <span className='bullet bullet-sm bullet-success mr-1'></span>\n                  <span className='align-middle'>Low</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  active={handleActiveItem('medium')}\n                  className='d-flex align-items-center'\n                  tag={Link}\n                  to='/apps/todo/tag/medium'\n                  onClick={() => handleTag('medium')}\n                  action\n                >\n                  <span className='bullet bullet-sm bullet-warning mr-1'></span>\n                  <span className='align-middle'>Medium</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  active={handleActiveItem('high')}\n                  className='d-flex align-items-center'\n                  tag={Link}\n                  to='/apps/todo/tag/high'\n                  onClick={() => handleTag('high')}\n                  action\n                >\n                  <span className='bullet bullet-sm bullet-danger mr-1'></span>\n                  <span className='align-middle'>High</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  active={handleActiveItem('update')}\n                  className='d-flex align-items-center'\n                  tag={Link}\n                  to='/apps/todo/tag/update'\n                  onClick={() => handleTag('update')}\n                  action\n                >\n                  <span className='bullet bullet-sm bullet-info mr-1'></span>\n                  <span className='align-middle'>Update</span>\n                </ListGroupItem>\n              </ListGroup>\n            </PerfectScrollbar>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TodoSidebar\n","// ** React Imports\nimport { useState, Fragment } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Star, Trash } from 'react-feather'\nimport { Editor } from '@tinymce/tinymce-react'\nimport Select, { components } from 'react-select'\nimport { Modal, ModalBody, Button, Form, FormGroup, Input, Label, Media } from 'reactstrap'\n\n// ** Utils\nimport { isObjEmpty, selectThemeColors } from '@utils'\n\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\n\n// ** Assignee Avatars\nimport img1 from '@src/assets/images/portrait/small/avatar-s-11.jpg'\n\n\n// ** Styles Imports\nimport '@styles/react/libs/editor/editor.scss'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\n// ** Function to capitalize the first letter of string\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1)\n\n// ** Modal Header\nconst ModalHeader = props => {\n  // ** Props\n  const {\n    children,\n    store,\n    handleTaskSidebar,\n    setDeleted,\n    deleted,\n    important,\n    setImportant,\n    deleteTask,\n    dispatch\n  } = props\n\n  // ** Function to delete task\n  const handleDeleteTask = () => {\n    setDeleted(!deleted)\n    dispatch(deleteTask(store.selectedTask.id))\n    handleTaskSidebar()\n  }\n\n  return (\n    <div className='modal-header d-flex align-items-center justify-content-between mb-1'>\n      <h5 className='modal-title'>{children}</h5>\n      <div className='todo-item-action d-flex align-items-center'>\n        {store && !isObjEmpty(store.selectedTask) ? (\n          <Trash className='cursor-pointer mt-25' size={16} onClick={() => handleDeleteTask()} />\n        ) : null}\n        <span className='todo-item-favorite cursor-pointer mx-75'>\n          <Star\n            size={16}\n            onClick={() => setImportant(!important)}\n            className={classnames({\n              'text-warning': important === true\n            })}\n          />\n        </span>\n        <X className='font-weight-normal mt-25' size={16} onClick={handleTaskSidebar} />\n      </div>\n    </div>\n  )\n}\n\nconst TaskSidebar = props => {\n  // ** State\n  const [skin, setSkin] = useSkin()\n\n  // ** Props\n  const { open, handleTaskSidebar, store, dispatch, updateTask, selectTask, addTask, deleteTask } = props\n\n  // ** Users\n  const [title, setTitle] = useState(''),\n    [assignee, setAssignee] = useState({ value: 'pheobe', label: 'Pheobe Buffay', img: img1 }),\n    [tags, setTags] = useState([]),\n    [desc, setDesc] = useState('<p></p>'),\n    [completed, setCompleted] = useState(false),\n    [important, setImportant] = useState(false),\n    [deleted, setDeleted] = useState(false),\n    [dueDate, setDueDate] = useState(new Date())\n\n  // ** Assignee Select Options\n  const assigneeOptions = [\n    { value: 'pheobe', label: 'Pheobe Buffay', img: img1 },\n    { value: 'chandler', label: 'Chandler Bing', img: img1 },\n    { value: 'ross', label: 'Ross Geller', img: img1 },\n    { value: 'monica', label: 'Monica Geller', img: img1 },\n    { value: 'joey', label: 'Joey Tribbiani', img: img1 },\n    { value: 'Rachel', label: 'Rachel Green', img: img1 }\n  ]\n\n  // ** Tag Select Options\n  const tagOptions = [\n    { value: 'team', label: 'Team' },\n    { value: 'low', label: 'Low' },\n    { value: 'medium', label: 'Medium' },\n    { value: 'high', label: 'High' },\n    { value: 'update', label: 'Update' }\n  ]\n\n  // ** Custom Assignee Component\n  const AssigneeComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <Media className='align-items-center'>\n          <img className='d-block rounded-circle mr-50' src={data.img} height='26' width='26' alt={data.label} />\n          <Media body>\n            <p className='mb-0'>{data.label}</p>\n          </Media>\n        </Media>\n      </components.Option>\n    )\n  }\n\n  // ** Returns sidebar title\n  const handleSidebarTitle = () => {\n    if (store && !isObjEmpty(store.selectedTask)) {\n      return (\n        <Button.Ripple\n          outline\n          size='sm'\n          onClick={() => setCompleted(!completed)}\n          color={completed === true ? 'success' : 'secondary'}\n        >\n          {completed === true ? 'Completed' : 'Mark Complete'}\n        </Button.Ripple>\n      )\n    } else {\n      return 'Add Task'\n    }\n  }\n\n  // ** Function to run when sidebar opens\n  const handleSidebarOpened = () => {\n    const { selectedTask } = store\n    if (!isObjEmpty(selectedTask)) {\n      setTitle(selectedTask.title)\n      setCompleted(selectedTask.isCompleted)\n      setImportant(selectedTask.isImportant)\n      setAssignee([\n        {\n          value: selectedTask.assignee.fullName,\n          label: selectedTask.assignee.fullName,\n          img: selectedTask.assignee.avatar\n        }\n      ])\n      setDueDate(selectedTask.dueDate)\n      setDesc(selectedTask.description)\n\n      if (selectedTask.tags.length) {\n        const tags = []\n        selectedTask.tags.map(tag => {\n          tags.push({ value: tag, label: capitalize(tag) })\n        })\n        setTags(tags)\n      }\n    }\n  }\n\n  // ** Function to run when sidebar closes\n  const handleSidebarClosed = () => {\n    setTags([])\n    setDesc('')\n    setTitle('')\n    setAssignee({ value: 'pheobe', label: 'Pheobe Buffay', img: img1 })\n    setCompleted(false)\n    setImportant(false)\n    setDueDate(new Date())\n    dispatch(selectTask({}))\n  }\n\n  // ** Function to reset fileds\n  const handleResetFields = () => {\n    setTitle(store.selectedTask.title)\n    setDesc(store.selectedTask.description)\n    setCompleted(store.selectedTask.isCompleted)\n    setImportant(store.selectedTask.isImportant)\n    setDeleted(store.selectedTask.isDeleted)\n    setDueDate(store.selectedTask.dueDate)\n    if (store.selectedTask.assignee.fullName !== assignee.label) {\n      setAssignee({\n        value: store.selectedTask.assignee.fullName,\n        label: store.selectedTask.assignee.fullName,\n        img: store.selectedTask.assignee.avatar\n      })\n    }\n    if (store.selectedTask.tags.length) {\n      const tags = []\n      store.selectedTask.tags.map(tag => {\n        tags.push({ value: tag, label: capitalize(tag) })\n      })\n      setTags(tags)\n    }\n  }\n\n  // ** Renders Footer Buttons\n  const renderFooterButtons = () => {\n    const newTaskTag = []\n\n    const doesInclude = !isObjEmpty(store.selectedTask) && assignee.label === store.selectedTask.assignee.fullName\n\n    if (tags.length) {\n      tags.map(tag => newTaskTag.push(tag.value))\n    }\n\n    const newAssignee = {\n      fullName: assignee.label,\n      avatar: assignee.img\n    }\n    const state = {\n      title,\n      dueDate,\n      tags: newTaskTag,\n      description: desc,\n      isCompleted: completed,\n      isDeleted: deleted,\n      isImportant: important,\n      assignee: doesInclude || assignee.label === undefined ? store.selectedTask.assignee : newAssignee\n    }\n\n    if (store && !isObjEmpty(store.selectedTask)) {\n      return (\n        <Fragment>\n          <Button\n            color='primary'\n            disabled={!title.length}\n            className='update-btn update-todo-item mr-1'\n            onClick={() => {\n              dispatch(updateTask({ ...state, id: store.selectedTask.id }))\n              handleTaskSidebar()\n            }}\n          >\n            Update\n          </Button>\n          <Button color='secondary' onClick={handleResetFields} outline>\n            Reset\n          </Button>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          <Button\n            color='primary'\n            disabled={!title.length}\n            className='add-todo-item mr-1'\n            onClick={() => {\n              dispatch(addTask(state))\n              handleTaskSidebar()\n            }}\n          >\n            Add\n          </Button>\n          <Button color='secondary' onClick={handleTaskSidebar} outline>\n            Cancel\n          </Button>\n        </Fragment>\n      )\n    }\n  }\n\n  return (\n    <Modal\n      isOpen={open}\n      toggle={handleTaskSidebar}\n      className='sidebar-lg'\n      contentClassName='p-0'\n      onOpened={handleSidebarOpened}\n      onClosed={handleSidebarClosed}\n      modalClassName='modal-slide-in sidebar-todo-modal'\n    >\n      <Form id='form-modal-todo' className='todo-modal' onSubmit={e => e.preventDefault()}>\n        <ModalHeader\n          store={store}\n          deleted={deleted}\n          dispatch={dispatch}\n          important={important}\n          deleteTask={deleteTask}\n          setDeleted={setDeleted}\n          setImportant={setImportant}\n          handleTaskSidebar={handleTaskSidebar}\n        >\n          {handleSidebarTitle()}\n        </ModalHeader>\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n          <FormGroup>\n            <Label className='form-label' for='task-title'>\n              Title\n            </Label>\n            <Input\n              id='task-title'\n              value={title}\n              placeholder='Title'\n              className='new-todo-item-title'\n              onChange={e => setTitle(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-assignee'>\n              Assignee\n            </Label>\n            <Select\n              id='task-assignee'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={assigneeOptions}\n              theme={selectThemeColors}\n              value={assignee}\n              onChange={data => setAssignee(data)}\n              components={{ Option: AssigneeComponent }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='due-date'>\n              Due Date\n            </Label>\n            <Flatpickr\n              id='due-date'\n              name='due-date'\n              className='form-control'\n              onChange={date => setDueDate(date[0])}\n              value={dueDate}\n              options={{ dateFormat: 'Y-m-d' }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label className='form-label' for='task-tags'>\n              Tags\n            </Label>\n            <Select\n              isMulti\n              id='task-tags'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={tagOptions}\n              theme={selectThemeColors}\n              value={tags}\n              onChange={data => {\n                setTags(data !== null ? [...data] : [])\n              }}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for='task-desc' className='form-label'>\n              Description\n            </Label>\n            <Editor\n              apiKey='emjshh1tafcjgizkmk6eofcmmcxc2cmugajs9l2ordjyca64'\n              value={desc}\n              onEditorChange={content => setDesc(content)}\n              init={{\n                menubar: false,\n                toolbar: 'bold italic underline aligncenter link',\n                toolbar_location: 'bottom',\n                skin: skin === 'dark' ? 'dark' : undefined,\n                content_css: skin === 'dark' ? 'dark' : undefined\n              }}\n            />\n          </FormGroup>\n          <FormGroup className='my-1'>{renderFooterButtons()}</FormGroup>\n        </ModalBody>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default TaskSidebar\n","import axios from 'axios'\n\n// ** Get Tasks\nexport const getTasks = params => {\n  return dispatch => {\n    return axios.get('/apps/todo/tasks', { params }).then(res => {\n      dispatch({\n        type: 'GET_TASKS',\n        tasks: res.data,\n        params\n      })\n    })\n  }\n}\n\n// ** Re-order Tasks on drag\nexport const reOrderTasks = tasks => dispatch => dispatch({ type: 'REORDER_TASKS', tasks })\n\n// ** ADD Task\nexport const addTask = task => {\n  return (dispatch, getState) => {\n    axios\n      .post('/apps/todo/add-tasks', { task })\n      .then(res => {\n        dispatch({\n          type: 'ADD_TASK',\n          task: res.data\n        })\n      })\n      .then(dispatch(getTasks(getState().todo.params)))\n  }\n}\n\n// ** Update Tasks\nexport const updateTask = task => {\n  return (dispatch, getState) => {\n    axios\n      .post('/apps/todo/update-task', { task })\n      .then(res => {\n        dispatch({\n          type: 'UPDATE_TASK',\n          task: res.data\n        })\n      })\n      .then(dispatch(getTasks(getState().todo.params)))\n  }\n}\n\n// ** Delete Task\nexport const deleteTask = taskId => {\n  return (dispatch, getState) => {\n    axios\n      .delete('/apps/todo/delete-task', { taskId })\n      .then(res => {\n        dispatch({\n          type: 'DELETE_TASK',\n          task: res.data\n        })\n      })\n      .then(() => dispatch(getTasks(getState().todo.params)))\n  }\n}\n\n// ** Select Task\nexport const selectTask = task => dispatch => dispatch({ type: 'SELECT_TASK', task })\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\n\n// ** Third Party Components\nimport classnames from 'classnames'\n\n// ** Todo App Components\nimport Tasks from './Tasks'\nimport Sidebar from './Sidebar'\nimport TaskSidebar from './TaskSidebar'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getTasks, updateTask, selectTask, addTask, deleteTask, reOrderTasks } from './store/actions'\n\n// ** Styles\nimport '@styles/react/apps/app-todo.scss'\n\nconst TODO = () => {\n  // ** States\n  const [sort, setSort] = useState('')\n  const [query, setQuery] = useState('')\n  const [mainSidebar, setMainSidebar] = useState(false)\n  const [openTaskSidebar, setOpenTaskSidebar] = useState(false)\n\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.todo)\n\n  // ** URL Params\n  const paramsURL = useParams()\n  const params = {\n    filter: paramsURL.filter || '',\n    q: query || '',\n    sortBy: sort || '',\n    tag: paramsURL.tag || ''\n  }\n\n  // ** Function to handle Left sidebar & Task sidebar\n  const handleMainSidebar = () => setMainSidebar(!mainSidebar)\n  const handleTaskSidebar = () => setOpenTaskSidebar(!openTaskSidebar)\n\n  // ** Get Tasks on mount & based on dependency change\n  useEffect(() => {\n    dispatch(\n      getTasks({\n        filter: paramsURL.filter || '',\n        q: query || '',\n        sortBy: sort || '',\n        tag: paramsURL.tag || ''\n      })\n    )\n  }, [store.tasks.length, paramsURL.filter, paramsURL.tag, query, sort])\n\n  return (\n    <Fragment>\n      <Sidebar\n        store={store}\n        params={params}\n        getTasks={getTasks}\n        dispatch={dispatch}\n        mainSidebar={mainSidebar}\n        urlFilter={paramsURL.filter}\n        setMainSidebar={setMainSidebar}\n        handleTaskSidebar={handleTaskSidebar}\n      />\n      <div className='content-right'>\n        <div className='content-wrapper'>\n          <div className='content-body'>\n            <div\n              className={classnames('body-content-overlay', {\n                show: mainSidebar === true\n              })}\n              onClick={handleMainSidebar}\n            ></div>\n\n            {store ? (\n              <Tasks\n                store={store}\n                tasks={store.tasks}\n                sort={sort}\n                query={query}\n                params={params}\n                setSort={setSort}\n                setQuery={setQuery}\n                dispatch={dispatch}\n                getTasks={getTasks}\n                paramsURL={paramsURL}\n                updateTask={updateTask}\n                selectTask={selectTask}\n                reOrderTasks={reOrderTasks}\n                handleMainSidebar={handleMainSidebar}\n                handleTaskSidebar={handleTaskSidebar}\n              />\n            ) : null}\n\n            <TaskSidebar\n              store={store}\n              params={params}\n              addTask={addTask}\n              dispatch={dispatch}\n              open={openTaskSidebar}\n              updateTask={updateTask}\n              selectTask={selectTask}\n              deleteTask={deleteTask}\n              handleTaskSidebar={handleTaskSidebar}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default TODO\n"],"sourceRoot":""}