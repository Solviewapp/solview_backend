{"version":3,"sources":["views/forms/form-elements/staking/StakingContent.js","views/forms/form-elements/staking/index.js","@core/components/card-snippet/index.js"],"names":["require","web3","SystemProgram","Keypair","programID","SYSVAR_CLOCK_PUBKEY","PublicKey","poolKey","fromSecretKey","Uint8Array","poolSecret","opts","StakingContent","publicKey","useWallet","wallet","connection","useConnection","useState","balance","setBalance","depositVal","setDepositVal","withdrawVal","setWithdrawVal","rewardAmount","setRewardAmount","getProvider","a","provider","Provider","getWalletBalance","pubkey","getTokenAccountsByOwner","mint","tokens","value","length","token","pop","getTokenAccountBalance","val","uiAmount","console","log","getAllData","program","Program","idl","account","pool","fetch","poolObject","adminRewardAmount","toNumber","LAMPORTS_PER_SOL","fund","amount","alert","pubkeyToUse","stakingMintObject","Token","TOKEN_PROGRAM_ID","payer","getOrCreateAssociatedAccountInfo","stakingAccountInfo","stakingPubkey","address","toBase58","findProgramAddress","toBuffer","_poolSigner","poolSigner","rpc","fundStaking","BN","accounts","stakingVault","funder","from","tokenProgram","withdraw","useEffect","Card","CardBody","Row","Col","md","sm","Label","toFixed","FormGroup","for","Input","type","onChange","e","target","id","Button","onClick","me","InputGroups","Prism","highlightAll","className","title","CardSnippet","props","children","noBody","code","iconCode","isOpen","setIsOpen","IconCode","size","Wrapper","Fragment","tag"],"mappings":"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","file":"static/js/150.7609a0d3.chunk.js","sourcesContent":["import { Card, CardBody, FormGroup, Label, Input, CustomInput, Button, Row, Col } from 'reactstrap'\nimport { PublicKey } from '@solana/web3.js'\nimport { Program, Provider, web3, BN } from '@project-serum/anchor'\nimport { TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\"\nimport idl from '../../../../json/idl.json'\nimport poolSecret from '../../../../json/pool.json'\nimport {\n  useWallet,\n  useConnection\n} from '@solana/wallet-adapter-react'\nimport { useEffect, useState } from 'react'\nrequire('@solana/wallet-adapter-react-ui/styles.css')\nconst { SystemProgram, Keypair, SYSVAR_CLOCK_PUBKEY } = web3\nconst programID = new PublicKey(\"E4VP5CqmKCy7HLzCyZg3FaKLoCE5M9nLhyZLWPMjeeQ6\")\n\nconst poolKey = Keypair.fromSecretKey(new Uint8Array(poolSecret))\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}\nconst StakingContent = () => {\n  const { publicKey } = useWallet()\n  const wallet = useWallet()\n  const { connection } = useConnection()\n  const [balance, setBalance] = useState(0.0)\n  const [depositVal, setDepositVal] = useState(0)\n  const [withdrawVal, setWithdrawVal] = useState(0)\n  const [rewardAmount, setRewardAmount] = useState(0)\n\n  const getProvider = async () => {\n    const provider = new Provider(\n      connection, wallet, opts.preflightCommitment\n    )\n    return provider\n  }\n\n  const getWalletBalance = async (pubkey) => {\n    if (!wallet.publicKey) {\n      return 0\n    }\n\n    const provider = await getProvider()\n    const tokens = await provider.connection.getTokenAccountsByOwner(wallet.publicKey, { mint: pubkey })\n    if (tokens.value.length === 0) {\n      return 0\n    }\n    const token = tokens.value.pop()\n    const val = (await provider.connection.getTokenAccountBalance(token.pubkey)).value\n    setBalance(val.uiAmount)\n    console.log(balance, \"balance\")\n  }\n  const getAllData = async () => {\n    const provider = await getProvider()\n    const program = new Program(idl, programID, provider)\n    const poolObject = await program.account.pool.fetch(poolKey.publicKey)\n    setRewardAmount(poolObject.adminRewardAmount.toNumber() / web3.LAMPORTS_PER_SOL)\n    console.log(poolObject, \"poolObject\")\n  }\n\n\n  const fund = async (amount) => {\n    if (amount === 0) {\n      alert(\"Balance is 0!\")\n      return\n    }\n    if (amount > balance) {\n      alert(\"This is more than your balance!\")\n      return\n    }\n    const provider = await getProvider()\n\n    const program = new Program(idl, programID, provider)\n\n    const pubkeyToUse = poolKey.publicKey\n    const poolObject = await program.account.pool.fetch(pubkeyToUse)\n\n    const stakingMintObject = new Token(\n      provider.connection,\n      new PublicKey('7WaHiTbeYJNk69prYJphFnQXVWmARFbfrQ7PLpkQfGBH'),\n      TOKEN_PROGRAM_ID,\n      provider.wallet.payer)\n    const stakingAccountInfo = await stakingMintObject.getOrCreateAssociatedAccountInfo(wallet.publicKey)\n    const stakingPubkey = stakingAccountInfo.address\n    console.log(stakingPubkey.toBase58(), \"stakingpubkey\")\n    const [\n      _poolSigner,\n      _nonce\n    ] = await PublicKey.findProgramAddress(\n      [pubkeyToUse.toBuffer()],\n      programID\n    )\n    const poolSigner = _poolSigner\n    try {\n      await program.rpc.fundStaking(\n        new BN(amount * web3.LAMPORTS_PER_SOL),\n        {\n          accounts: {\n            // Stake instance.\n            pool: pubkeyToUse,\n            stakingVault: poolObject.stakingVault,\n            funder: provider.wallet.publicKey,\n            from: stakingPubkey,\n            // Program signers.\n            poolSigner,\n            // Misc.\n            tokenProgram: TOKEN_PROGRAM_ID\n          }\n        })\n      getAllData()\n      getWalletBalance(new PublicKey(\"7WaHiTbeYJNk69prYJphFnQXVWmARFbfrQ7PLpkQfGBH\"))\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const withdraw = async (amount) => {\n    console.log(amount, \"as\")\n    const provider = await getProvider()\n    if (provider.wallet.publicKey.toBase58() === '9BqViyehpiQjn1ZHDcJt321JRBVxJj9ouCKjfLmMGrtX' || provider.wallet.publicKey.toBase58() === '5QFcQWUk7d7ByNCXxCyKNiui21TyMzX3grfSKk6PbnRK') {\n      if (amount === 0) {\n        alert(\"Balance is 0!\")\n        return\n      }\n      if (amount > rewardAmount) {\n        alert(\"This is more than your balance!\")\n        return\n      }\n\n\n      const program = new Program(idl, programID, provider)\n      console.log(program)\n      console.log(programID.toBase58())\n      const pubkeyToUse = poolKey.publicKey\n      const poolObject = await program.account.pool.fetch(pubkeyToUse)\n\n      const stakingMintObject = new Token(\n        provider.connection,\n        new PublicKey('7WaHiTbeYJNk69prYJphFnQXVWmARFbfrQ7PLpkQfGBH'),\n        TOKEN_PROGRAM_ID,\n        provider.wallet.payer)\n      const stakingAccountInfo = await stakingMintObject.getOrCreateAssociatedAccountInfo(wallet.publicKey)\n      const stakingPubkey = stakingAccountInfo.address\n\n      const [\n        _poolSigner,\n        _nonce\n      ] = await PublicKey.findProgramAddress(\n        [pubkeyToUse.toBuffer()],\n        programID\n      )\n      const poolSigner = _poolSigner\n      try {\n\n        await program.rpc.withdraw(\n          new BN(amount * web3.LAMPORTS_PER_SOL),\n          {\n            accounts: {\n              // Stake instance.\n              pool: pubkeyToUse,\n              stakingVault: poolObject.stakingVault,\n              funder: provider.wallet.publicKey,\n              from: stakingPubkey,\n              // Program signers.\n              poolSigner,\n              // Misc.\n              tokenProgram: TOKEN_PROGRAM_ID\n            }\n          })\n        getAllData()\n        getWalletBalance(new PublicKey(\"7WaHiTbeYJNk69prYJphFnQXVWmARFbfrQ7PLpkQfGBH\"))\n      } catch (err) {\n        console.log(err)\n      }\n    } else {\n      alert(\"You aren't admin!\")\n    }\n\n  }\n\n  useEffect(() => {\n    if (publicKey) {\n\n      getAllData()\n      getWalletBalance(new PublicKey(\"7WaHiTbeYJNk69prYJphFnQXVWmARFbfrQ7PLpkQfGBH\"))\n    }\n    console.log(publicKey, \"wallet\")\n  }, [publicKey])\n  return (\n    <Card>\n      <CardBody>\n        <Row>\n          <Col md='6' sm='12'>\n            <Label>\n              SOLV Balance: {balance ? balance.toFixed(4) : 0} SOLV\n            </Label>\n          </Col>\n\n          <Col md=\"6\" sm=\"12\">\n            <Label>\n              Reward Amount: {rewardAmount ? rewardAmount.toFixed(4) : 0} SOLV\n            </Label>\n          </Col>\n        </Row>\n        <Row>\n          <Col md='6' sm='12'>\n            <Row>\n              <Col md=\"12\" sm=\"12\">\n                <FormGroup>\n                  <Label for='input'>Deposit</Label>\n                  <Input type='text' value={depositVal} onChange={(e) => setDepositVal(e.target.value)} id=\"url\" />\n                </FormGroup>\n              </Col>\n              <Col md=\"12\" sm=\"12\">\n                <Row>\n                  <Col md=\"6\" sm=\"6\">\n                    <Button onClick={() => setDepositVal(balance)}>MAX</Button>\n                  </Col>\n                  <Col md=\"6\" sm=\"6\">\n                    <Button onClick={() => fund(depositVal)}>APPROVE</Button>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Col>\n          <Col md='6' sm='12'>\n            <Row>\n              <Col me=\"12\" sm=\"12\">\n                <FormGroup>\n                  <Label for='input'>Withdraw</Label>\n                  <Input type='text' value={withdrawVal} onChange={(e) => setWithdrawVal(e.target.value)} id=\"url\" />\n                </FormGroup>\n              </Col>\n              <Col md=\"12\" sm=\"12\">\n                <Row>\n                  <Col md=\"6\" sm=\"6\">\n                    <Button onClick={() => setWithdrawVal(rewardAmount)}>MAX</Button>\n                  </Col>\n                  <Col md=\"6\" sm=\"6\">\n                    <Button onClick={() => withdraw(withdrawVal)}>APPROVE</Button>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Col>\n\n        </Row>\n\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StakingContent\n","import { Fragment, useEffect } from 'react'\nimport { Row, Col } from 'reactstrap'\nimport Prism from 'prismjs'\nimport Card from '@components/card-snippet'\nimport StakingContent from './StakingContent'\nconst InputGroups = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  })\n  return (\n    <Fragment>\n      <Row className='match-height'>\n        <Col md='12' sm='12'>\n          <Card title='Staking Management'>\n            <StakingContent />\n          </Card>\n        </Col>\n\n      </Row>\n    </Fragment>\n  )\n}\nexport default InputGroups\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  children: PropTypes.any,\n  code: PropTypes.node,\n  iconCode: PropTypes.node,\n  noBody: PropTypes.bool\n}\n"],"sourceRoot":""}