{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js","@core/auth/jwt/jwtDefaultConfig.js","@core/auth/jwt/jwtService.js","auth/jwt/useJwt.js","@core/auth/jwt/useJwt.js"],"names":["ToastContent","name","role","className","size","color","icon","Login","props","useSkin","skin","ability","useContext","AbilityContext","dispatch","useDispatch","history","useHistory","useState","email","setEmail","password","setPassword","illustration","source","require","default","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","top","right","target","placement","onSubmit","event","errors","length","useJwt","login","then","res","data","userData","accessToken","refreshToken","handleLogin","update","push","getHomeRouteForLoggedInUser","toast","success","fullName","username","transition","Slide","hideProgressBar","autoClose","catch","err","console","log","for","required","autoFocus","type","value","placeholder","onChange","AvInput","label","Ripple","block","disabled","InputPasswordToggle","hideIcon","showIcon","visible","htmlFor","iconSize","rest","inputVisibility","setInputVisibility","classnames","addonType","renderIcon","defaultProps","loginEndpoint","registerEndpoint","refreshEndpoint","logoutEndpoint","tokenType","storageTokenKeyName","storageRefreshTokenKeyName","JwtService","jwtOverrideConfig","jwtConfig","jwtDefaultConfig","isAlreadyFetchingAccessToken","subscribers","this","axios","interceptors","request","use","config","getToken","headers","Authorization","error","Promise","reject","response","originalRequest","status","r","setToken","setRefreshToken","onAccessTokenFetched","resolve","addSubscriber","filter","callback","localStorage","getItem","setItem","args","post","getRefreshToken","jwt"],"mappings":"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","file":"static/js/156.7121f633.chunk.js","sourcesContent":["import { useState, useContext, Fragment } from 'react'\nimport Avatar from '@components/avatar'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { toast, Slide } from 'react-toastify'\nimport { handleLogin } from '@store/actions/auth'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport { Link, useHistory } from 'react-router-dom'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { getHomeRouteForLoggedInUser } from '@utils'\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\nimport {\n  Alert,\n  Row,\n  Col,\n  CardTitle,\n  CardText,\n  FormGroup,\n  Label,\n  CustomInput,\n  Button,\n  UncontrolledTooltip\n} from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst ToastContent = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, Kenan</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to Solview. Now you can start to explore. Enjoy!</span>\n    </div>\n  </Fragment>\n)\n\nconst Login = props => {\n  const [skin, setSkin] = useSkin()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const [email, setEmail] = useState('admin@demo.com')\n  const [password, setPassword] = useState('admin')\n\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const handleSubmit = (event, errors) => {\n    if (errors && !errors.length) {\n      useJwt\n        .login({ email, password })\n        .then(res => {\n          const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\n          dispatch(handleLogin(data))\n          ability.update(res.data.userData.ability)\n          history.push(getHomeRouteForLoggedInUser(data.role))\n          toast.success(\n            <ToastContent name={data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\n            { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n          )\n        })\n        .catch(err => console.log(err))\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-v2'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ml-1'>Vuexy</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login V2' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='font-weight-bold mb-1'>\n              Welcome to Vuexy! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Alert color='primary'>\n              <div className='alert-body font-small-2'>\n                <p>\n                  <small className='mr-50'>\n                    <span className='font-weight-bold'>Admin:</span> admin@demo.com | admin\n                  </small>\n                </p>\n                <p>\n                  <small className='mr-50'>\n                    <span className='font-weight-bold'>Client:</span> client@demo.com | client\n                  </small>\n                </p>\n              </div>\n              <HelpCircle\n                id='login-tip'\n                className='position-absolute'\n                size={18}\n                style={{ top: '10px', right: '10px' }}\n              />\n              <UncontrolledTooltip target='login-tip' placement='left'>\n                This is just for ACL demo purpose.\n              </UncontrolledTooltip>\n            </Alert>\n            <AvForm className='auth-login-form mt-2' onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <AvInput\n                  required\n                  autoFocus\n                  type='email'\n                  value={email}\n                  id='login-email'\n                  name='login-email'\n                  placeholder='john@example.com'\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  <Link to='/forgot-password'>\n                    <small>Forgot Password?</small>\n                  </Link>\n                </div>\n                <InputPasswordToggle\n                  required\n                  tag={AvInput}\n                  value={password}\n                  id='login-password'\n                  name='login-password'\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Remember Me' />\n              </FormGroup>\n              <Button.Ripple color='primary' block disabled={!email.length || !password.length}>\n                Sign in\n              </Button.Ripple>\n            </AvForm>\n            <p className='text-center mt-2'>\n              <span className='mr-25'>New on our platform?</span>\n              <Link to='/register'>\n                <span>Create an account</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button.Ripple color='facebook'>\n                <Facebook size={14} />\n              </Button.Ripple>\n              <Button.Ripple color='twitter'>\n                <Twitter size={14} />\n              </Button.Ripple>\n              <Button.Ripple color='google'>\n                <Mail size={14} />\n              </Button.Ripple>\n              <Button.Ripple className='mr-0' color='github'>\n                <GitHub size={14} />\n              </Button.Ripple>\n            </div>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const { label, hideIcon, showIcon, visible, className, htmlFor, placeholder, iconSize, ...rest } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","// ** Auth Endpoints\nexport default {\n  loginEndpoint: '/jwt/login',\n  registerEndpoint: '/jwt/register',\n  refreshEndpoint: '/jwt/refresh-token',\n  logoutEndpoint: '/jwt/logout',\n\n  // ** This will be prefixed in authorization header with token\n  // ? e.g. Authorization: Bearer <token>\n  tokenType: 'Bearer',\n\n  // ** Value of this property will be used as key to store JWT token in storage\n  storageTokenKeyName: 'accessToken',\n  storageRefreshTokenKeyName: 'refreshToken'\n}\n","import axios from 'axios'\nimport jwtDefaultConfig from './jwtDefaultConfig'\n\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n  jwtConfig = { ...jwtDefaultConfig }\n\n  // ** For Refreshing Token\n  isAlreadyFetchingAccessToken = false\n\n  // ** For Refreshing Token\n  subscribers = []\n\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\n\n    // ** Request Interceptor\n    axios.interceptors.request.use(\n      config => {\n        // ** Get token from localStorage\n        const accessToken = this.getToken()\n\n        // ** If token is present add it to request's Authorization Header\n        if (accessToken) {\n          // ** eslint-disable-next-line no-param-reassign\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n        }\n        return config\n      },\n      error => Promise.reject(error)\n    )\n\n    // ** Add request/response interceptor\n    axios.interceptors.response.use(\n      response => response,\n      error => {\n        // ** const { config, response: { status } } = error\n        const { config, response } = error\n        const originalRequest = config\n\n        // ** if (status === 401) {\n        if (response && response.status === 401) {\n          if (!this.isAlreadyFetchingAccessToken) {\n            this.isAlreadyFetchingAccessToken = true\n            this.refreshToken().then(r => {\n              this.isAlreadyFetchingAccessToken = false\n\n              // ** Update accessToken in localStorage\n              this.setToken(r.data.accessToken)\n              this.setRefreshToken(r.data.refreshToken)\n\n              this.onAccessTokenFetched(r.data.accessToken)\n            })\n          }\n          const retryOriginalRequest = new Promise(resolve => {\n            this.addSubscriber(accessToken => {\n              // ** Make sure to assign accessToken according to your response.\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n              // ** Change Authorization header\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n              resolve(this.axios(originalRequest))\n            })\n          })\n          return retryOriginalRequest\n        }\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\n  }\n\n  addSubscriber(callback) {\n    this.subscribers.push(callback)\n  }\n\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\n  }\n\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\n  }\n\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\n  }\n\n  login(...args) {\n    return axios.post(this.jwtConfig.loginEndpoint, ...args)\n  }\n\n  register(...args) {\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\n  }\n\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    })\n  }\n}\n","// ** Core JWT Import\nimport useJwt from '@src/@core/auth/jwt/useJwt'\n\nconst { jwt } = useJwt({})\n\nexport default jwt\n","// ** JWT Service Import\nimport JwtService from './jwtService'\n\n// ** Export Service as useJwt\nexport default function useJwt(jwtOverrideConfig) {\n  const jwt = new JwtService(jwtOverrideConfig)\n\n  return {\n    jwt\n  }\n}\n"],"sourceRoot":""}