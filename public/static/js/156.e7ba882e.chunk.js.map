{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js","@core/auth/jwt/jwtDefaultConfig.js","@core/auth/jwt/jwtService.js","auth/jwt/useJwt.js","@core/auth/jwt/useJwt.js"],"names":["ToastContent","name","role","className","size","color","icon","Login","props","useSkin","skin","ability","useContext","AbilityContext","dispatch","useDispatch","history","useHistory","useState","email","setEmail","password","setPassword","illustration","source","require","default","to","onClick","e","preventDefault","lg","sm","src","alt","md","tag","onSubmit","event","errors","length","useJwt","login","then","res","console","log","data","userData","accessToken","refreshToken","handleLogin","update","push","getHomeRouteForLoggedInUser","toast","success","fullName","username","transition","Slide","hideProgressBar","autoClose","catch","err","for","required","autoFocus","type","value","id","placeholder","onChange","target","AvInput","label","Ripple","block","disabled","InputPasswordToggle","hideIcon","showIcon","visible","htmlFor","iconSize","rest","inputVisibility","setInputVisibility","classnames","addonType","renderIcon","defaultProps","loginEndpoint","registerEndpoint","refreshEndpoint","logoutEndpoint","tokenType","storageTokenKeyName","storageRefreshTokenKeyName","JwtService","jwtOverrideConfig","jwtConfig","jwtDefaultConfig","isAlreadyFetchingAccessToken","subscribers","this","axios","interceptors","request","use","config","getToken","headers","Authorization","error","Promise","reject","response","originalRequest","status","r","setToken","setRefreshToken","onAccessTokenFetched","resolve","addSubscriber","filter","callback","localStorage","getItem","setItem","args","fakeData","post","getRefreshToken","jwt"],"mappings":"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","file":"static/js/156.e7ba882e.chunk.js","sourcesContent":["import { useState, useContext, Fragment } from 'react'\nimport Avatar from '@components/avatar'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { toast, Slide } from 'react-toastify'\nimport { handleLogin } from '@store/actions/auth'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport { Link, useHistory } from 'react-router-dom'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { getHomeRouteForLoggedInUser } from '@utils'\nimport { Coffee } from 'react-feather'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\nimport {\n  Row,\n  Col,\n  CardTitle,\n  FormGroup,\n  Label,\n  CustomInput,\n  Button\n} from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst ToastContent = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, Kenan</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to Solview. Now you can start to explore. Enjoy!</span>\n    </div>\n  </Fragment>\n)\n\nconst Login = props => {\n  const [skin, setSkin] = useSkin()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const [email, setEmail] = useState('admin@demo.com')\n  const [password, setPassword] = useState('admin')\n\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const handleSubmit = (event, errors) => {\n    if (errors && !errors.length) {\n      useJwt\n        .login({ email, password })\n        .then(res => {\n          console.log(res, \"resData\")\n          const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\n          dispatch(handleLogin(data))\n          ability.update(res.data.userData.ability)\n          history.push(getHomeRouteForLoggedInUser(data.role))\n          toast.success(\n            <ToastContent name={data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\n            { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n          )\n        })\n        .catch(err => console.log(err))\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-v2'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n\n          <h2 className='brand-text text-primary ml-1'>SOLVIEW ADMIN</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login V2' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='font-weight-bold mb-1'>\n              Welcome to Solview! ðŸ‘‹\n            </CardTitle>\n            <AvForm className='auth-login-form mt-2' onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <AvInput\n                  required\n                  autoFocus\n                  type='email'\n                  value={email}\n                  id='login-email'\n                  name='login-email'\n                  placeholder='john@example.com'\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                </div>\n                <InputPasswordToggle\n                  required\n                  tag={AvInput}\n                  value={password}\n                  id='login-password'\n                  name='login-password'\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Remember Me' />\n              </FormGroup>\n              <Button.Ripple color='primary' block disabled={!email.length || !password.length}>\n                Sign in\n              </Button.Ripple>\n            </AvForm>\n\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const { label, hideIcon, showIcon, visible, className, htmlFor, placeholder, iconSize, ...rest } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : 'Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·'}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","// ** Auth Endpoints\nexport default {\n  loginEndpoint: '/jwt/login',\n  registerEndpoint: '/jwt/register',\n  refreshEndpoint: '/jwt/refresh-token',\n  logoutEndpoint: '/jwt/logout',\n  login: 'http://localhost:3333/user/login',\n\n  // ** This will be prefixed in authorization header with token\n  // ? e.g. Authorization: Bearer <token>\n  tokenType: 'Bearer',\n\n  // ** Value of this property will be used as key to store JWT token in storage\n  storageTokenKeyName: 'accessToken',\n  storageRefreshTokenKeyName: 'refreshToken'\n}\n","import axios from 'axios'\nimport jwtDefaultConfig from './jwtDefaultConfig'\n\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n  jwtConfig = { ...jwtDefaultConfig }\n\n  // ** For Refreshing Token\n  isAlreadyFetchingAccessToken = false\n\n  // ** For Refreshing Token\n  subscribers = []\n\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\n\n    // ** Request Interceptor\n    axios.interceptors.request.use(\n      config => {\n        // ** Get token from localStorage\n        const accessToken = this.getToken()\n\n        // ** If token is present add it to request's Authorization Header\n        if (accessToken) {\n          // ** eslint-disable-next-line no-param-reassign\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n        }\n        return config\n      },\n      error => Promise.reject(error)\n    )\n\n    // ** Add request/response interceptor\n    axios.interceptors.response.use(\n      response => response,\n      error => {\n        // ** const { config, response: { status } } = error\n        const { config, response } = error\n        const originalRequest = config\n\n        // ** if (status === 401) {\n        if (response && response.status === 401) {\n          if (!this.isAlreadyFetchingAccessToken) {\n            this.isAlreadyFetchingAccessToken = true\n            this.refreshToken().then(r => {\n              this.isAlreadyFetchingAccessToken = false\n\n              // ** Update accessToken in localStorage\n              this.setToken(r.data.accessToken)\n              this.setRefreshToken(r.data.refreshToken)\n\n              this.onAccessTokenFetched(r.data.accessToken)\n            })\n          }\n          const retryOriginalRequest = new Promise(resolve => {\n            this.addSubscriber(accessToken => {\n              // ** Make sure to assign accessToken according to your response.\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n              // ** Change Authorization header\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n              resolve(this.axios(originalRequest))\n            })\n          })\n          return retryOriginalRequest\n        }\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\n  }\n\n  addSubscriber(callback) {\n    this.subscribers.push(callback)\n  }\n\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\n  }\n\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\n  }\n\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\n  }\n\n  login(...args) {\n    const data = [...args]\n    console.log(data, data.email, data.password, \"no\")\n    if (data[0].email === 'kenan@gmail.com' && data[0].password === 'solviewadmin') {\n      const userData = { email: 'admin@demo.com', password: 'admin' }\n      const fakeData = axios.post(this.jwtConfig.loginEndpoint, userData)\n      return fakeData\n    } else {\n      const userData = { email: 'no@demo.com', password: 'admin' }\n      const fakeData = axios.post(this.jwtConfig.loginEndpoint, userData)\n      return fakeData\n    }\n  }\n\n\n  register(...args) {\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\n  }\n\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    })\n  }\n}\n","// ** Core JWT Import\nimport useJwt from '@src/@core/auth/jwt/useJwt'\n\nconst { jwt } = useJwt({})\n\nexport default jwt\n","// ** JWT Service Import\nimport JwtService from './jwtService'\n\n// ** Export Service as useJwt\nexport default function useJwt(jwtOverrideConfig) {\n  const jwt = new JwtService(jwtOverrideConfig)\n\n  return {\n    jwt\n  }\n}\n"],"sourceRoot":""}